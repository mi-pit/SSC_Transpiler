# Generated from SSC.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,121,1170,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,1,0,1,0,1,0,1,0,1,0,1,
        0,3,0,199,8,0,1,1,1,1,3,1,203,8,1,1,2,4,2,206,8,2,11,2,12,2,207,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,219,8,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,239,
        8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,5,5,251,8,5,10,5,12,
        5,254,9,5,1,6,1,6,3,6,258,8,6,1,6,1,6,1,6,1,7,1,7,3,7,265,8,7,1,
        7,1,7,1,7,1,7,1,7,1,7,3,7,273,8,7,1,7,1,7,3,7,277,8,7,1,7,1,7,1,
        7,1,7,1,7,1,7,3,7,285,8,7,1,7,1,7,1,7,1,7,1,7,3,7,292,8,7,1,7,1,
        7,1,7,1,7,1,7,5,7,299,8,7,10,7,12,7,302,9,7,1,8,1,8,1,8,5,8,307,
        8,8,10,8,12,8,310,9,8,1,9,5,9,313,8,9,10,9,12,9,316,9,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,329,8,9,1,10,1,10,1,11,3,
        11,334,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,343,8,11,1,12,
        1,12,1,12,5,12,348,8,12,10,12,12,12,351,9,12,1,13,1,13,1,13,5,13,
        356,8,13,10,13,12,13,359,9,13,1,14,1,14,1,14,5,14,364,8,14,10,14,
        12,14,367,9,14,1,15,1,15,1,15,5,15,372,8,15,10,15,12,15,375,9,15,
        1,16,1,16,1,16,5,16,380,8,16,10,16,12,16,383,9,16,1,17,1,17,1,17,
        5,17,388,8,17,10,17,12,17,391,9,17,1,18,1,18,1,18,5,18,396,8,18,
        10,18,12,18,399,9,18,1,19,1,19,1,19,5,19,404,8,19,10,19,12,19,407,
        9,19,1,20,1,20,1,20,5,20,412,8,20,10,20,12,20,415,9,20,1,21,1,21,
        1,21,5,21,420,8,21,10,21,12,21,423,9,21,1,22,1,22,1,22,1,22,1,22,
        1,22,3,22,431,8,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,439,8,23,1,
        24,1,24,1,25,1,25,1,25,5,25,446,8,25,10,25,12,25,449,9,25,1,26,1,
        26,1,27,1,27,3,27,455,8,27,1,27,1,27,1,27,3,27,460,8,27,1,28,4,28,
        463,8,28,11,28,12,28,464,1,29,4,29,468,8,29,11,29,12,29,469,1,30,
        1,30,1,30,1,30,1,30,3,30,477,8,30,1,31,1,31,1,31,5,31,482,8,31,10,
        31,12,31,485,9,31,1,32,1,32,1,32,3,32,490,8,32,1,33,1,33,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,3,34,522,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,532,
        8,35,1,36,4,36,535,8,36,11,36,12,36,536,1,37,1,37,3,37,541,8,37,
        1,38,1,38,1,38,1,38,1,39,1,39,3,39,549,8,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,3,39,558,8,39,1,40,1,40,1,41,4,41,563,8,41,11,41,
        12,41,564,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,575,8,42,
        1,43,1,43,3,43,579,8,43,1,43,3,43,582,8,43,1,44,1,44,1,44,5,44,587,
        8,44,10,44,12,44,590,9,44,1,45,1,45,3,45,594,8,45,1,45,1,45,3,45,
        598,8,45,1,46,1,46,3,46,602,8,46,1,46,1,46,1,46,3,46,607,8,46,1,
        46,1,46,1,46,1,46,3,46,613,8,46,1,47,1,47,1,47,5,47,618,8,47,10,
        47,12,47,621,9,47,1,48,1,48,1,48,3,48,626,8,48,1,49,1,49,1,50,1,
        50,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,3,52,647,8,52,1,53,1,53,1,53,1,53,3,53,653,8,53,1,53,
        1,53,1,54,3,54,658,8,54,1,54,1,54,5,54,662,8,54,10,54,12,54,665,
        9,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,3,55,684,8,55,1,55,1,55,1,55,3,55,689,8,
        55,1,55,3,55,692,8,55,1,55,1,55,1,55,1,55,1,55,3,55,699,8,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
        714,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
        726,8,55,1,55,5,55,729,8,55,10,55,12,55,732,9,55,1,56,1,56,1,57,
        1,57,1,57,1,57,1,57,1,57,3,57,742,8,57,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,59,3,59,752,8,59,1,59,1,59,3,59,756,8,59,5,59,758,8,
        59,10,59,12,59,761,9,59,1,60,1,60,1,60,3,60,766,8,60,1,60,3,60,769,
        8,60,1,61,1,61,1,61,1,61,1,61,5,61,776,8,61,10,61,12,61,779,9,61,
        1,62,1,62,3,62,783,8,62,4,62,785,8,62,11,62,12,62,786,1,63,4,63,
        790,8,63,11,63,12,63,791,1,64,1,64,1,64,3,64,797,8,64,1,65,1,65,
        1,65,5,65,802,8,65,10,65,12,65,805,9,65,1,66,1,66,1,66,1,66,1,66,
        3,66,812,8,66,3,66,814,8,66,1,67,1,67,1,67,5,67,819,8,67,10,67,12,
        67,822,9,67,1,68,1,68,3,68,826,8,68,1,69,1,69,3,69,830,8,69,1,69,
        1,69,5,69,834,8,69,10,69,12,69,837,9,69,3,69,839,8,69,1,70,1,70,
        1,70,1,70,1,70,5,70,846,8,70,10,70,12,70,849,9,70,1,70,1,70,3,70,
        853,8,70,1,70,3,70,856,8,70,1,70,1,70,1,70,1,70,3,70,862,8,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
        70,3,70,878,8,70,1,70,1,70,5,70,882,8,70,10,70,12,70,885,9,70,3,
        70,887,8,70,1,70,1,70,1,70,3,70,892,8,70,1,70,3,70,895,8,70,1,70,
        1,70,1,70,1,70,1,70,3,70,902,8,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,921,
        8,70,1,70,1,70,5,70,925,8,70,10,70,12,70,928,9,70,5,70,930,8,70,
        10,70,12,70,933,9,70,1,71,1,71,1,72,1,72,1,72,1,72,3,72,941,8,72,
        1,72,1,72,3,72,945,8,72,1,73,3,73,948,8,73,1,73,1,73,1,73,3,73,953,
        8,73,1,73,5,73,956,8,73,10,73,12,73,959,9,73,1,74,1,74,1,74,1,75,
        4,75,965,8,75,11,75,12,75,966,1,76,1,76,1,76,1,76,1,76,1,76,3,76,
        975,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,5,78,997,8,78,10,78,
        12,78,1000,9,78,3,78,1002,8,78,1,78,1,78,1,78,1,78,5,78,1008,8,78,
        10,78,12,78,1011,9,78,3,78,1013,8,78,5,78,1015,8,78,10,78,12,78,
        1018,9,78,1,78,1,78,3,78,1022,8,78,1,79,1,79,1,79,3,79,1027,8,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1037,8,79,1,80,1,80,
        3,80,1041,8,80,1,80,1,80,1,81,4,81,1046,8,81,11,81,12,81,1047,1,
        82,1,82,3,82,1052,8,82,1,83,3,83,1055,8,83,1,83,1,83,1,84,1,84,1,
        84,1,84,1,84,1,84,1,84,3,84,1066,8,84,1,84,1,84,1,84,1,84,1,84,1,
        84,3,84,1074,8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
        85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1096,8,
        85,1,86,1,86,3,86,1100,8,86,3,86,1102,8,86,1,86,1,86,3,86,1106,8,
        86,1,86,1,86,3,86,1110,8,86,1,87,1,87,3,87,1114,8,87,1,88,1,88,1,
        88,5,88,1119,8,88,10,88,12,88,1122,9,88,1,89,1,89,1,89,1,89,1,89,
        1,89,3,89,1130,8,89,1,89,1,89,3,89,1134,8,89,1,89,1,89,1,90,3,90,
        1139,8,90,1,90,1,90,1,91,4,91,1144,8,91,11,91,12,91,1145,1,92,1,
        92,1,93,1,93,1,93,1,93,3,93,1154,8,93,1,94,3,94,1157,8,94,1,94,1,
        94,3,94,1161,8,94,1,94,1,94,1,95,4,95,1166,8,95,11,95,12,95,1167,
        1,95,0,2,110,140,96,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,0,21,1,0,108,109,3,0,44,44,78,78,80,80,2,
        0,44,44,56,56,5,0,77,77,79,79,81,81,84,84,89,90,1,0,81,83,2,0,77,
        77,79,79,1,0,75,76,1,0,71,74,1,0,106,107,1,0,95,105,6,0,20,20,31,
        31,39,39,45,45,49,49,64,64,1,0,4,6,2,0,46,46,50,50,4,0,24,24,40,
        40,53,53,57,57,2,0,9,9,11,15,2,0,65,66,94,94,1,0,65,66,2,0,81,81,
        88,88,2,0,16,16,18,18,2,0,19,19,53,53,1,0,115,116,1280,0,198,1,0,
        0,0,2,202,1,0,0,0,4,205,1,0,0,0,6,238,1,0,0,0,8,240,1,0,0,0,10,247,
        1,0,0,0,12,257,1,0,0,0,14,276,1,0,0,0,16,303,1,0,0,0,18,314,1,0,
        0,0,20,330,1,0,0,0,22,342,1,0,0,0,24,344,1,0,0,0,26,352,1,0,0,0,
        28,360,1,0,0,0,30,368,1,0,0,0,32,376,1,0,0,0,34,384,1,0,0,0,36,392,
        1,0,0,0,38,400,1,0,0,0,40,408,1,0,0,0,42,416,1,0,0,0,44,424,1,0,
        0,0,46,438,1,0,0,0,48,440,1,0,0,0,50,442,1,0,0,0,52,450,1,0,0,0,
        54,459,1,0,0,0,56,462,1,0,0,0,58,467,1,0,0,0,60,476,1,0,0,0,62,478,
        1,0,0,0,64,486,1,0,0,0,66,491,1,0,0,0,68,521,1,0,0,0,70,531,1,0,
        0,0,72,534,1,0,0,0,74,540,1,0,0,0,76,542,1,0,0,0,78,557,1,0,0,0,
        80,559,1,0,0,0,82,562,1,0,0,0,84,574,1,0,0,0,86,578,1,0,0,0,88,583,
        1,0,0,0,90,597,1,0,0,0,92,612,1,0,0,0,94,614,1,0,0,0,96,622,1,0,
        0,0,98,627,1,0,0,0,100,629,1,0,0,0,102,634,1,0,0,0,104,646,1,0,0,
        0,106,648,1,0,0,0,108,657,1,0,0,0,110,683,1,0,0,0,112,733,1,0,0,
        0,114,741,1,0,0,0,116,743,1,0,0,0,118,751,1,0,0,0,120,762,1,0,0,
        0,122,777,1,0,0,0,124,784,1,0,0,0,126,789,1,0,0,0,128,793,1,0,0,
        0,130,798,1,0,0,0,132,813,1,0,0,0,134,815,1,0,0,0,136,823,1,0,0,
        0,138,838,1,0,0,0,140,886,1,0,0,0,142,934,1,0,0,0,144,944,1,0,0,
        0,146,947,1,0,0,0,148,960,1,0,0,0,150,964,1,0,0,0,152,974,1,0,0,
        0,154,976,1,0,0,0,156,1021,1,0,0,0,158,1036,1,0,0,0,160,1038,1,0,
        0,0,162,1045,1,0,0,0,164,1051,1,0,0,0,166,1054,1,0,0,0,168,1073,
        1,0,0,0,170,1095,1,0,0,0,172,1101,1,0,0,0,174,1111,1,0,0,0,176,1115,
        1,0,0,0,178,1133,1,0,0,0,180,1138,1,0,0,0,182,1143,1,0,0,0,184,1147,
        1,0,0,0,186,1153,1,0,0,0,188,1156,1,0,0,0,190,1165,1,0,0,0,192,199,
        5,111,0,0,193,194,5,111,0,0,194,195,5,65,0,0,195,196,3,16,8,0,196,
        197,5,66,0,0,197,199,1,0,0,0,198,192,1,0,0,0,198,193,1,0,0,0,199,
        1,1,0,0,0,200,203,5,114,0,0,201,203,3,0,0,0,202,200,1,0,0,0,202,
        201,1,0,0,0,203,3,1,0,0,0,204,206,3,2,1,0,205,204,1,0,0,0,206,207,
        1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,5,1,0,0,0,209,239,5,
        111,0,0,210,239,5,112,0,0,211,239,3,4,2,0,212,213,5,65,0,0,213,214,
        3,50,25,0,214,215,5,66,0,0,215,239,1,0,0,0,216,239,3,8,4,0,217,219,
        5,1,0,0,218,217,1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,221,
        5,65,0,0,221,222,3,160,80,0,222,223,5,66,0,0,223,239,1,0,0,0,224,
        225,5,2,0,0,225,226,5,65,0,0,226,227,3,18,9,0,227,228,5,94,0,0,228,
        229,3,136,68,0,229,230,5,66,0,0,230,239,1,0,0,0,231,232,5,3,0,0,
        232,233,5,65,0,0,233,234,3,136,68,0,234,235,5,94,0,0,235,236,3,18,
        9,0,236,237,5,66,0,0,237,239,1,0,0,0,238,209,1,0,0,0,238,210,1,0,
        0,0,238,211,1,0,0,0,238,212,1,0,0,0,238,216,1,0,0,0,238,218,1,0,
        0,0,238,224,1,0,0,0,238,231,1,0,0,0,239,7,1,0,0,0,240,241,5,60,0,
        0,241,242,5,65,0,0,242,243,3,46,23,0,243,244,5,94,0,0,244,245,3,
        10,5,0,245,246,5,66,0,0,246,9,1,0,0,0,247,252,3,12,6,0,248,249,5,
        94,0,0,249,251,3,12,6,0,250,248,1,0,0,0,251,254,1,0,0,0,252,250,
        1,0,0,0,252,253,1,0,0,0,253,11,1,0,0,0,254,252,1,0,0,0,255,258,3,
        136,68,0,256,258,5,26,0,0,257,255,1,0,0,0,257,256,1,0,0,0,258,259,
        1,0,0,0,259,260,5,92,0,0,260,261,3,46,23,0,261,13,1,0,0,0,262,277,
        3,6,3,0,263,265,5,1,0,0,264,263,1,0,0,0,264,265,1,0,0,0,265,266,
        1,0,0,0,266,267,5,65,0,0,267,268,3,136,68,0,268,269,5,66,0,0,269,
        270,5,69,0,0,270,272,3,146,73,0,271,273,5,94,0,0,272,271,1,0,0,0,
        272,273,1,0,0,0,273,274,1,0,0,0,274,275,5,70,0,0,275,277,1,0,0,0,
        276,262,1,0,0,0,276,264,1,0,0,0,277,300,1,0,0,0,278,279,5,67,0,0,
        279,280,3,50,25,0,280,281,5,68,0,0,281,299,1,0,0,0,282,284,5,65,
        0,0,283,285,3,16,8,0,284,283,1,0,0,0,284,285,1,0,0,0,285,286,1,0,
        0,0,286,299,5,66,0,0,287,288,7,0,0,0,288,289,5,111,0,0,289,291,5,
        65,0,0,290,292,3,16,8,0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,
        1,0,0,0,293,299,5,66,0,0,294,295,7,0,0,0,295,299,5,111,0,0,296,299,
        5,78,0,0,297,299,5,80,0,0,298,278,1,0,0,0,298,282,1,0,0,0,298,287,
        1,0,0,0,298,294,1,0,0,0,298,296,1,0,0,0,298,297,1,0,0,0,299,302,
        1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,15,1,0,0,0,302,300,1,
        0,0,0,303,308,3,46,23,0,304,305,5,94,0,0,305,307,3,46,23,0,306,304,
        1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,17,1,
        0,0,0,310,308,1,0,0,0,311,313,7,1,0,0,312,311,1,0,0,0,313,316,1,
        0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,328,1,0,0,0,316,314,1,
        0,0,0,317,329,3,14,7,0,318,319,3,20,10,0,319,320,3,22,11,0,320,329,
        1,0,0,0,321,322,7,2,0,0,322,323,5,65,0,0,323,324,3,136,68,0,324,
        325,5,66,0,0,325,329,1,0,0,0,326,327,5,86,0,0,327,329,5,111,0,0,
        328,317,1,0,0,0,328,318,1,0,0,0,328,321,1,0,0,0,328,326,1,0,0,0,
        329,19,1,0,0,0,330,331,7,3,0,0,331,21,1,0,0,0,332,334,5,1,0,0,333,
        332,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,336,5,65,0,0,336,
        337,3,136,68,0,337,338,5,66,0,0,338,339,3,22,11,0,339,343,1,0,0,
        0,340,343,3,18,9,0,341,343,5,113,0,0,342,333,1,0,0,0,342,340,1,0,
        0,0,342,341,1,0,0,0,343,23,1,0,0,0,344,349,3,22,11,0,345,346,7,4,
        0,0,346,348,3,22,11,0,347,345,1,0,0,0,348,351,1,0,0,0,349,347,1,
        0,0,0,349,350,1,0,0,0,350,25,1,0,0,0,351,349,1,0,0,0,352,357,3,24,
        12,0,353,354,7,5,0,0,354,356,3,24,12,0,355,353,1,0,0,0,356,359,1,
        0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,27,1,0,0,0,359,357,1,0,
        0,0,360,365,3,26,13,0,361,362,7,6,0,0,362,364,3,26,13,0,363,361,
        1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,29,1,
        0,0,0,367,365,1,0,0,0,368,373,3,28,14,0,369,370,7,7,0,0,370,372,
        3,28,14,0,371,369,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,
        1,0,0,0,374,31,1,0,0,0,375,373,1,0,0,0,376,381,3,30,15,0,377,378,
        7,8,0,0,378,380,3,30,15,0,379,377,1,0,0,0,380,383,1,0,0,0,381,379,
        1,0,0,0,381,382,1,0,0,0,382,33,1,0,0,0,383,381,1,0,0,0,384,389,3,
        32,16,0,385,386,5,84,0,0,386,388,3,32,16,0,387,385,1,0,0,0,388,391,
        1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,35,1,0,0,0,391,389,1,
        0,0,0,392,397,3,34,17,0,393,394,5,88,0,0,394,396,3,34,17,0,395,393,
        1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,37,1,
        0,0,0,399,397,1,0,0,0,400,405,3,36,18,0,401,402,5,85,0,0,402,404,
        3,36,18,0,403,401,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,
        1,0,0,0,406,39,1,0,0,0,407,405,1,0,0,0,408,413,3,38,19,0,409,410,
        5,86,0,0,410,412,3,38,19,0,411,409,1,0,0,0,412,415,1,0,0,0,413,411,
        1,0,0,0,413,414,1,0,0,0,414,41,1,0,0,0,415,413,1,0,0,0,416,421,3,
        40,20,0,417,418,5,87,0,0,418,420,3,40,20,0,419,417,1,0,0,0,420,423,
        1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,43,1,0,0,0,423,421,1,
        0,0,0,424,430,3,42,21,0,425,426,5,91,0,0,426,427,3,50,25,0,427,428,
        5,92,0,0,428,429,3,44,22,0,429,431,1,0,0,0,430,425,1,0,0,0,430,431,
        1,0,0,0,431,45,1,0,0,0,432,439,3,44,22,0,433,434,3,18,9,0,434,435,
        3,48,24,0,435,436,3,46,23,0,436,439,1,0,0,0,437,439,5,113,0,0,438,
        432,1,0,0,0,438,433,1,0,0,0,438,437,1,0,0,0,439,47,1,0,0,0,440,441,
        7,9,0,0,441,49,1,0,0,0,442,447,3,46,23,0,443,444,5,94,0,0,444,446,
        3,46,23,0,445,443,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,
        1,0,0,0,448,51,1,0,0,0,449,447,1,0,0,0,450,451,3,44,22,0,451,53,
        1,0,0,0,452,454,3,56,28,0,453,455,3,62,31,0,454,453,1,0,0,0,454,
        455,1,0,0,0,455,456,1,0,0,0,456,457,5,93,0,0,457,460,1,0,0,0,458,
        460,3,154,77,0,459,452,1,0,0,0,459,458,1,0,0,0,460,55,1,0,0,0,461,
        463,3,60,30,0,462,461,1,0,0,0,463,464,1,0,0,0,464,462,1,0,0,0,464,
        465,1,0,0,0,465,57,1,0,0,0,466,468,3,60,30,0,467,466,1,0,0,0,468,
        469,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,59,1,0,0,0,471,477,
        3,66,33,0,472,477,3,68,34,0,473,477,3,102,51,0,474,477,3,104,52,
        0,475,477,3,106,53,0,476,471,1,0,0,0,476,472,1,0,0,0,476,473,1,0,
        0,0,476,474,1,0,0,0,476,475,1,0,0,0,477,61,1,0,0,0,478,483,3,64,
        32,0,479,480,5,94,0,0,480,482,3,64,32,0,481,479,1,0,0,0,482,485,
        1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,63,1,0,0,0,485,483,1,
        0,0,0,486,489,3,108,54,0,487,488,5,95,0,0,488,490,3,144,72,0,489,
        487,1,0,0,0,489,490,1,0,0,0,490,65,1,0,0,0,491,492,7,10,0,0,492,
        67,1,0,0,0,493,522,5,52,0,0,494,522,5,23,0,0,495,522,5,42,0,0,496,
        522,5,37,0,0,497,522,5,38,0,0,498,522,5,32,0,0,499,522,5,28,0,0,
        500,522,5,43,0,0,501,522,5,51,0,0,502,522,5,58,0,0,503,522,5,59,
        0,0,504,522,5,4,0,0,505,522,5,5,0,0,506,522,5,6,0,0,507,508,5,1,
        0,0,508,509,5,65,0,0,509,510,7,11,0,0,510,522,5,66,0,0,511,522,3,
        100,50,0,512,522,3,78,39,0,513,522,3,70,35,0,514,522,3,92,46,0,515,
        522,3,142,71,0,516,517,5,7,0,0,517,518,5,65,0,0,518,519,3,52,26,
        0,519,520,5,66,0,0,520,522,1,0,0,0,521,493,1,0,0,0,521,494,1,0,0,
        0,521,495,1,0,0,0,521,496,1,0,0,0,521,497,1,0,0,0,521,498,1,0,0,
        0,521,499,1,0,0,0,521,500,1,0,0,0,521,501,1,0,0,0,521,502,1,0,0,
        0,521,503,1,0,0,0,521,504,1,0,0,0,521,505,1,0,0,0,521,506,1,0,0,
        0,521,507,1,0,0,0,521,511,1,0,0,0,521,512,1,0,0,0,521,513,1,0,0,
        0,521,514,1,0,0,0,521,515,1,0,0,0,521,516,1,0,0,0,522,69,1,0,0,0,
        523,524,5,47,0,0,524,525,5,111,0,0,525,526,5,69,0,0,526,527,3,72,
        36,0,527,528,5,70,0,0,528,532,1,0,0,0,529,530,5,47,0,0,530,532,5,
        111,0,0,531,523,1,0,0,0,531,529,1,0,0,0,532,71,1,0,0,0,533,535,3,
        74,37,0,534,533,1,0,0,0,535,536,1,0,0,0,536,534,1,0,0,0,536,537,
        1,0,0,0,537,73,1,0,0,0,538,541,3,54,27,0,539,541,3,188,94,0,540,
        538,1,0,0,0,540,539,1,0,0,0,541,75,1,0,0,0,542,543,3,86,43,0,543,
        544,3,88,44,0,544,545,5,93,0,0,545,77,1,0,0,0,546,548,3,80,40,0,
        547,549,5,111,0,0,548,547,1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,
        0,550,551,5,69,0,0,551,552,3,82,41,0,552,553,5,70,0,0,553,558,1,
        0,0,0,554,555,3,80,40,0,555,556,5,111,0,0,556,558,1,0,0,0,557,546,
        1,0,0,0,557,554,1,0,0,0,558,79,1,0,0,0,559,560,7,12,0,0,560,81,1,
        0,0,0,561,563,3,84,42,0,562,561,1,0,0,0,563,564,1,0,0,0,564,562,
        1,0,0,0,564,565,1,0,0,0,565,83,1,0,0,0,566,567,3,86,43,0,567,568,
        3,88,44,0,568,569,5,93,0,0,569,575,1,0,0,0,570,571,3,86,43,0,571,
        572,5,93,0,0,572,575,1,0,0,0,573,575,3,154,77,0,574,566,1,0,0,0,
        574,570,1,0,0,0,574,573,1,0,0,0,575,85,1,0,0,0,576,579,3,68,34,0,
        577,579,3,102,51,0,578,576,1,0,0,0,578,577,1,0,0,0,579,581,1,0,0,
        0,580,582,3,86,43,0,581,580,1,0,0,0,581,582,1,0,0,0,582,87,1,0,0,
        0,583,588,3,90,45,0,584,585,5,94,0,0,585,587,3,90,45,0,586,584,1,
        0,0,0,587,590,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,89,1,0,
        0,0,590,588,1,0,0,0,591,598,3,108,54,0,592,594,3,108,54,0,593,592,
        1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,596,5,92,0,0,596,598,
        3,52,26,0,597,591,1,0,0,0,597,593,1,0,0,0,598,91,1,0,0,0,599,601,
        5,30,0,0,600,602,5,111,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,603,
        1,0,0,0,603,604,5,69,0,0,604,606,3,94,47,0,605,607,5,94,0,0,606,
        605,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,609,5,70,0,0,609,
        613,1,0,0,0,610,611,5,30,0,0,611,613,5,111,0,0,612,599,1,0,0,0,612,
        610,1,0,0,0,613,93,1,0,0,0,614,619,3,96,48,0,615,616,5,94,0,0,616,
        618,3,96,48,0,617,615,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,
        620,1,0,0,0,620,95,1,0,0,0,621,619,1,0,0,0,622,625,3,98,49,0,623,
        624,5,95,0,0,624,626,3,52,26,0,625,623,1,0,0,0,625,626,1,0,0,0,626,
        97,1,0,0,0,627,628,5,111,0,0,628,99,1,0,0,0,629,630,5,57,0,0,630,
        631,5,65,0,0,631,632,3,136,68,0,632,633,5,66,0,0,633,101,1,0,0,0,
        634,635,7,13,0,0,635,103,1,0,0,0,636,647,5,36,0,0,637,647,5,62,0,
        0,638,647,5,8,0,0,639,647,5,9,0,0,640,647,3,116,58,0,641,642,5,10,
        0,0,642,643,5,65,0,0,643,644,5,111,0,0,644,647,5,66,0,0,645,647,
        3,0,0,0,646,636,1,0,0,0,646,637,1,0,0,0,646,638,1,0,0,0,646,639,
        1,0,0,0,646,640,1,0,0,0,646,641,1,0,0,0,646,645,1,0,0,0,647,105,
        1,0,0,0,648,649,5,55,0,0,649,652,5,65,0,0,650,653,3,136,68,0,651,
        653,3,52,26,0,652,650,1,0,0,0,652,651,1,0,0,0,653,654,1,0,0,0,654,
        655,5,66,0,0,655,107,1,0,0,0,656,658,3,124,62,0,657,656,1,0,0,0,
        657,658,1,0,0,0,658,659,1,0,0,0,659,663,3,110,55,0,660,662,3,114,
        57,0,661,660,1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,
        0,0,664,109,1,0,0,0,665,663,1,0,0,0,666,667,6,55,-1,0,667,684,5,
        111,0,0,668,669,5,65,0,0,669,670,3,108,54,0,670,671,5,66,0,0,671,
        684,1,0,0,0,672,673,5,111,0,0,673,674,5,92,0,0,674,684,5,113,0,0,
        675,676,3,112,56,0,676,677,5,111,0,0,677,684,1,0,0,0,678,679,5,65,
        0,0,679,680,3,112,56,0,680,681,3,108,54,0,681,682,5,66,0,0,682,684,
        1,0,0,0,683,666,1,0,0,0,683,668,1,0,0,0,683,672,1,0,0,0,683,675,
        1,0,0,0,683,678,1,0,0,0,684,730,1,0,0,0,685,686,10,9,0,0,686,688,
        5,67,0,0,687,689,3,126,63,0,688,687,1,0,0,0,688,689,1,0,0,0,689,
        691,1,0,0,0,690,692,3,46,23,0,691,690,1,0,0,0,691,692,1,0,0,0,692,
        693,1,0,0,0,693,729,5,68,0,0,694,695,10,8,0,0,695,696,5,67,0,0,696,
        698,5,45,0,0,697,699,3,126,63,0,698,697,1,0,0,0,698,699,1,0,0,0,
        699,700,1,0,0,0,700,701,3,46,23,0,701,702,5,68,0,0,702,729,1,0,0,
        0,703,704,10,7,0,0,704,705,5,67,0,0,705,706,3,126,63,0,706,707,5,
        45,0,0,707,708,3,46,23,0,708,709,5,68,0,0,709,729,1,0,0,0,710,711,
        10,6,0,0,711,713,5,67,0,0,712,714,3,126,63,0,713,712,1,0,0,0,713,
        714,1,0,0,0,714,715,1,0,0,0,715,716,5,81,0,0,716,729,5,68,0,0,717,
        718,10,5,0,0,718,719,5,65,0,0,719,720,3,128,64,0,720,721,5,66,0,
        0,721,729,1,0,0,0,722,723,10,4,0,0,723,725,5,65,0,0,724,726,3,134,
        67,0,725,724,1,0,0,0,725,726,1,0,0,0,726,727,1,0,0,0,727,729,5,66,
        0,0,728,685,1,0,0,0,728,694,1,0,0,0,728,703,1,0,0,0,728,710,1,0,
        0,0,728,717,1,0,0,0,728,722,1,0,0,0,729,732,1,0,0,0,730,728,1,0,
        0,0,730,731,1,0,0,0,731,111,1,0,0,0,732,730,1,0,0,0,733,734,7,14,
        0,0,734,113,1,0,0,0,735,736,5,16,0,0,736,737,5,65,0,0,737,738,3,
        4,2,0,738,739,5,66,0,0,739,742,1,0,0,0,740,742,3,116,58,0,741,735,
        1,0,0,0,741,740,1,0,0,0,742,115,1,0,0,0,743,744,5,17,0,0,744,745,
        5,65,0,0,745,746,5,65,0,0,746,747,3,118,59,0,747,748,5,66,0,0,748,
        749,5,66,0,0,749,117,1,0,0,0,750,752,3,120,60,0,751,750,1,0,0,0,
        751,752,1,0,0,0,752,759,1,0,0,0,753,755,5,94,0,0,754,756,3,120,60,
        0,755,754,1,0,0,0,755,756,1,0,0,0,756,758,1,0,0,0,757,753,1,0,0,
        0,758,761,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,760,119,1,0,0,
        0,761,759,1,0,0,0,762,768,8,15,0,0,763,765,5,65,0,0,764,766,3,16,
        8,0,765,764,1,0,0,0,765,766,1,0,0,0,766,767,1,0,0,0,767,769,5,66,
        0,0,768,763,1,0,0,0,768,769,1,0,0,0,769,121,1,0,0,0,770,776,8,16,
        0,0,771,772,5,65,0,0,772,773,3,122,61,0,773,774,5,66,0,0,774,776,
        1,0,0,0,775,770,1,0,0,0,775,771,1,0,0,0,776,779,1,0,0,0,777,775,
        1,0,0,0,777,778,1,0,0,0,778,123,1,0,0,0,779,777,1,0,0,0,780,782,
        7,17,0,0,781,783,3,126,63,0,782,781,1,0,0,0,782,783,1,0,0,0,783,
        785,1,0,0,0,784,780,1,0,0,0,785,786,1,0,0,0,786,784,1,0,0,0,786,
        787,1,0,0,0,787,125,1,0,0,0,788,790,3,102,51,0,789,788,1,0,0,0,790,
        791,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,792,127,1,0,0,0,793,
        796,3,130,65,0,794,795,5,94,0,0,795,797,5,110,0,0,796,794,1,0,0,
        0,796,797,1,0,0,0,797,129,1,0,0,0,798,803,3,132,66,0,799,800,5,94,
        0,0,800,802,3,132,66,0,801,799,1,0,0,0,802,805,1,0,0,0,803,801,1,
        0,0,0,803,804,1,0,0,0,804,131,1,0,0,0,805,803,1,0,0,0,806,807,3,
        56,28,0,807,808,3,108,54,0,808,814,1,0,0,0,809,811,3,58,29,0,810,
        812,3,138,69,0,811,810,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,
        806,1,0,0,0,813,809,1,0,0,0,814,133,1,0,0,0,815,820,5,111,0,0,816,
        817,5,94,0,0,817,819,5,111,0,0,818,816,1,0,0,0,819,822,1,0,0,0,820,
        818,1,0,0,0,820,821,1,0,0,0,821,135,1,0,0,0,822,820,1,0,0,0,823,
        825,3,86,43,0,824,826,3,138,69,0,825,824,1,0,0,0,825,826,1,0,0,0,
        826,137,1,0,0,0,827,839,3,124,62,0,828,830,3,124,62,0,829,828,1,
        0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,835,3,140,70,0,832,834,
        3,114,57,0,833,832,1,0,0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,836,
        1,0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,838,827,1,0,0,0,838,829,
        1,0,0,0,839,139,1,0,0,0,840,841,6,70,-1,0,841,842,5,65,0,0,842,843,
        3,138,69,0,843,847,5,66,0,0,844,846,3,114,57,0,845,844,1,0,0,0,846,
        849,1,0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,887,1,0,0,0,849,
        847,1,0,0,0,850,852,5,67,0,0,851,853,3,126,63,0,852,851,1,0,0,0,
        852,853,1,0,0,0,853,855,1,0,0,0,854,856,3,46,23,0,855,854,1,0,0,
        0,855,856,1,0,0,0,856,857,1,0,0,0,857,887,5,68,0,0,858,859,5,67,
        0,0,859,861,5,45,0,0,860,862,3,126,63,0,861,860,1,0,0,0,861,862,
        1,0,0,0,862,863,1,0,0,0,863,864,3,46,23,0,864,865,5,68,0,0,865,887,
        1,0,0,0,866,867,5,67,0,0,867,868,3,126,63,0,868,869,5,45,0,0,869,
        870,3,46,23,0,870,871,5,68,0,0,871,887,1,0,0,0,872,873,5,67,0,0,
        873,874,5,81,0,0,874,887,5,68,0,0,875,877,5,65,0,0,876,878,3,128,
        64,0,877,876,1,0,0,0,877,878,1,0,0,0,878,879,1,0,0,0,879,883,5,66,
        0,0,880,882,3,114,57,0,881,880,1,0,0,0,882,885,1,0,0,0,883,881,1,
        0,0,0,883,884,1,0,0,0,884,887,1,0,0,0,885,883,1,0,0,0,886,840,1,
        0,0,0,886,850,1,0,0,0,886,858,1,0,0,0,886,866,1,0,0,0,886,872,1,
        0,0,0,886,875,1,0,0,0,887,931,1,0,0,0,888,889,10,5,0,0,889,891,5,
        67,0,0,890,892,3,126,63,0,891,890,1,0,0,0,891,892,1,0,0,0,892,894,
        1,0,0,0,893,895,3,46,23,0,894,893,1,0,0,0,894,895,1,0,0,0,895,896,
        1,0,0,0,896,930,5,68,0,0,897,898,10,4,0,0,898,899,5,67,0,0,899,901,
        5,45,0,0,900,902,3,126,63,0,901,900,1,0,0,0,901,902,1,0,0,0,902,
        903,1,0,0,0,903,904,3,46,23,0,904,905,5,68,0,0,905,930,1,0,0,0,906,
        907,10,3,0,0,907,908,5,67,0,0,908,909,3,126,63,0,909,910,5,45,0,
        0,910,911,3,46,23,0,911,912,5,68,0,0,912,930,1,0,0,0,913,914,10,
        2,0,0,914,915,5,67,0,0,915,916,5,81,0,0,916,930,5,68,0,0,917,918,
        10,1,0,0,918,920,5,65,0,0,919,921,3,128,64,0,920,919,1,0,0,0,920,
        921,1,0,0,0,921,922,1,0,0,0,922,926,5,66,0,0,923,925,3,114,57,0,
        924,923,1,0,0,0,925,928,1,0,0,0,926,924,1,0,0,0,926,927,1,0,0,0,
        927,930,1,0,0,0,928,926,1,0,0,0,929,888,1,0,0,0,929,897,1,0,0,0,
        929,906,1,0,0,0,929,913,1,0,0,0,929,917,1,0,0,0,930,933,1,0,0,0,
        931,929,1,0,0,0,931,932,1,0,0,0,932,141,1,0,0,0,933,931,1,0,0,0,
        934,935,5,111,0,0,935,143,1,0,0,0,936,945,3,46,23,0,937,938,5,69,
        0,0,938,940,3,146,73,0,939,941,5,94,0,0,940,939,1,0,0,0,940,941,
        1,0,0,0,941,942,1,0,0,0,942,943,5,70,0,0,943,945,1,0,0,0,944,936,
        1,0,0,0,944,937,1,0,0,0,945,145,1,0,0,0,946,948,3,148,74,0,947,946,
        1,0,0,0,947,948,1,0,0,0,948,949,1,0,0,0,949,957,3,144,72,0,950,952,
        5,94,0,0,951,953,3,148,74,0,952,951,1,0,0,0,952,953,1,0,0,0,953,
        954,1,0,0,0,954,956,3,144,72,0,955,950,1,0,0,0,956,959,1,0,0,0,957,
        955,1,0,0,0,957,958,1,0,0,0,958,147,1,0,0,0,959,957,1,0,0,0,960,
        961,3,150,75,0,961,962,5,95,0,0,962,149,1,0,0,0,963,965,3,152,76,
        0,964,963,1,0,0,0,965,966,1,0,0,0,966,964,1,0,0,0,966,967,1,0,0,
        0,967,151,1,0,0,0,968,969,5,67,0,0,969,970,3,52,26,0,970,971,5,68,
        0,0,971,975,1,0,0,0,972,973,5,109,0,0,973,975,5,111,0,0,974,968,
        1,0,0,0,974,972,1,0,0,0,975,153,1,0,0,0,976,977,5,63,0,0,977,978,
        5,65,0,0,978,979,3,52,26,0,979,980,5,94,0,0,980,981,3,4,2,0,981,
        982,5,66,0,0,982,983,5,93,0,0,983,155,1,0,0,0,984,1022,3,158,79,
        0,985,1022,3,160,80,0,986,1022,3,166,83,0,987,1022,3,168,84,0,988,
        1022,3,170,85,0,989,1022,3,178,89,0,990,991,7,18,0,0,991,992,7,19,
        0,0,992,1001,5,65,0,0,993,998,3,42,21,0,994,995,5,94,0,0,995,997,
        3,42,21,0,996,994,1,0,0,0,997,1000,1,0,0,0,998,996,1,0,0,0,998,999,
        1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1001,993,1,0,0,0,1001,
        1002,1,0,0,0,1002,1016,1,0,0,0,1003,1012,5,92,0,0,1004,1009,3,42,
        21,0,1005,1006,5,94,0,0,1006,1008,3,42,21,0,1007,1005,1,0,0,0,1008,
        1011,1,0,0,0,1009,1007,1,0,0,0,1009,1010,1,0,0,0,1010,1013,1,0,0,
        0,1011,1009,1,0,0,0,1012,1004,1,0,0,0,1012,1013,1,0,0,0,1013,1015,
        1,0,0,0,1014,1003,1,0,0,0,1015,1018,1,0,0,0,1016,1014,1,0,0,0,1016,
        1017,1,0,0,0,1017,1019,1,0,0,0,1018,1016,1,0,0,0,1019,1020,5,66,
        0,0,1020,1022,5,93,0,0,1021,984,1,0,0,0,1021,985,1,0,0,0,1021,986,
        1,0,0,0,1021,987,1,0,0,0,1021,988,1,0,0,0,1021,989,1,0,0,0,1021,
        990,1,0,0,0,1022,157,1,0,0,0,1023,1024,5,111,0,0,1024,1026,5,92,
        0,0,1025,1027,3,156,78,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,
        1037,1,0,0,0,1028,1029,5,22,0,0,1029,1030,3,52,26,0,1030,1031,5,
        92,0,0,1031,1032,3,156,78,0,1032,1037,1,0,0,0,1033,1034,5,26,0,0,
        1034,1035,5,92,0,0,1035,1037,3,156,78,0,1036,1023,1,0,0,0,1036,1028,
        1,0,0,0,1036,1033,1,0,0,0,1037,159,1,0,0,0,1038,1040,5,69,0,0,1039,
        1041,3,162,81,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,
        0,0,0,1042,1043,5,70,0,0,1043,161,1,0,0,0,1044,1046,3,164,82,0,1045,
        1044,1,0,0,0,1046,1047,1,0,0,0,1047,1045,1,0,0,0,1047,1048,1,0,0,
        0,1048,163,1,0,0,0,1049,1052,3,156,78,0,1050,1052,3,54,27,0,1051,
        1049,1,0,0,0,1051,1050,1,0,0,0,1052,165,1,0,0,0,1053,1055,3,50,25,
        0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1056,1,0,0,0,1056,1057,
        5,93,0,0,1057,167,1,0,0,0,1058,1059,5,35,0,0,1059,1060,5,65,0,0,
        1060,1061,3,50,25,0,1061,1062,5,66,0,0,1062,1065,3,156,78,0,1063,
        1064,5,29,0,0,1064,1066,3,156,78,0,1065,1063,1,0,0,0,1065,1066,1,
        0,0,0,1066,1074,1,0,0,0,1067,1068,5,48,0,0,1068,1069,5,65,0,0,1069,
        1070,3,50,25,0,1070,1071,5,66,0,0,1071,1072,3,156,78,0,1072,1074,
        1,0,0,0,1073,1058,1,0,0,0,1073,1067,1,0,0,0,1074,169,1,0,0,0,1075,
        1076,5,54,0,0,1076,1077,5,65,0,0,1077,1078,3,50,25,0,1078,1079,5,
        66,0,0,1079,1080,3,156,78,0,1080,1096,1,0,0,0,1081,1082,5,27,0,0,
        1082,1083,3,156,78,0,1083,1084,5,54,0,0,1084,1085,5,65,0,0,1085,
        1086,3,50,25,0,1086,1087,5,66,0,0,1087,1088,5,93,0,0,1088,1096,1,
        0,0,0,1089,1090,5,33,0,0,1090,1091,5,65,0,0,1091,1092,3,172,86,0,
        1092,1093,5,66,0,0,1093,1094,3,156,78,0,1094,1096,1,0,0,0,1095,1075,
        1,0,0,0,1095,1081,1,0,0,0,1095,1089,1,0,0,0,1096,171,1,0,0,0,1097,
        1102,3,174,87,0,1098,1100,3,50,25,0,1099,1098,1,0,0,0,1099,1100,
        1,0,0,0,1100,1102,1,0,0,0,1101,1097,1,0,0,0,1101,1099,1,0,0,0,1102,
        1103,1,0,0,0,1103,1105,5,93,0,0,1104,1106,3,176,88,0,1105,1104,1,
        0,0,0,1105,1106,1,0,0,0,1106,1107,1,0,0,0,1107,1109,5,93,0,0,1108,
        1110,3,176,88,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,173,1,0,
        0,0,1111,1113,3,56,28,0,1112,1114,3,62,31,0,1113,1112,1,0,0,0,1113,
        1114,1,0,0,0,1114,175,1,0,0,0,1115,1120,3,46,23,0,1116,1117,5,94,
        0,0,1117,1119,3,46,23,0,1118,1116,1,0,0,0,1119,1122,1,0,0,0,1120,
        1118,1,0,0,0,1120,1121,1,0,0,0,1121,177,1,0,0,0,1122,1120,1,0,0,
        0,1123,1124,5,34,0,0,1124,1134,5,111,0,0,1125,1134,5,25,0,0,1126,
        1134,5,21,0,0,1127,1129,5,41,0,0,1128,1130,3,50,25,0,1129,1128,1,
        0,0,0,1129,1130,1,0,0,0,1130,1134,1,0,0,0,1131,1132,5,34,0,0,1132,
        1134,3,18,9,0,1133,1123,1,0,0,0,1133,1125,1,0,0,0,1133,1126,1,0,
        0,0,1133,1127,1,0,0,0,1133,1131,1,0,0,0,1134,1135,1,0,0,0,1135,1136,
        5,93,0,0,1136,179,1,0,0,0,1137,1139,3,182,91,0,1138,1137,1,0,0,0,
        1138,1139,1,0,0,0,1139,1140,1,0,0,0,1140,1141,5,0,0,1,1141,181,1,
        0,0,0,1142,1144,3,186,93,0,1143,1142,1,0,0,0,1144,1145,1,0,0,0,1145,
        1143,1,0,0,0,1145,1146,1,0,0,0,1146,183,1,0,0,0,1147,1148,7,20,0,
        0,1148,185,1,0,0,0,1149,1154,3,188,94,0,1150,1154,3,54,27,0,1151,
        1154,3,0,0,0,1152,1154,5,93,0,0,1153,1149,1,0,0,0,1153,1150,1,0,
        0,0,1153,1151,1,0,0,0,1153,1152,1,0,0,0,1154,187,1,0,0,0,1155,1157,
        3,56,28,0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,1158,1,0,0,0,
        1158,1160,3,108,54,0,1159,1161,3,190,95,0,1160,1159,1,0,0,0,1160,
        1161,1,0,0,0,1161,1162,1,0,0,0,1162,1163,3,160,80,0,1163,189,1,0,
        0,0,1164,1166,3,54,27,0,1165,1164,1,0,0,0,1166,1167,1,0,0,0,1167,
        1165,1,0,0,0,1167,1168,1,0,0,0,1168,191,1,0,0,0,139,198,202,207,
        218,238,252,257,264,272,276,284,291,298,300,308,314,328,333,342,
        349,357,365,373,381,389,397,405,413,421,430,438,447,454,459,464,
        469,476,483,489,521,531,536,540,548,557,564,574,578,581,588,593,
        597,601,606,612,619,625,646,652,657,663,683,688,691,698,713,725,
        728,730,741,751,755,759,765,768,775,777,782,786,791,796,803,811,
        813,820,825,829,835,838,847,852,855,861,877,883,886,891,894,901,
        920,926,929,931,940,944,947,952,957,966,974,998,1001,1009,1012,1016,
        1021,1026,1036,1040,1047,1051,1054,1065,1073,1095,1099,1101,1105,
        1109,1113,1120,1129,1133,1138,1145,1153,1156,1160,1167
    ]

class SSCParser ( Parser ):

    grammarFileName = "SSC.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__cdecl'", "'__clrcall'", "'__fastcall'", "'__thiscall'", 
                     "'__vectorcall'", "'__asm'", "'__attribute__'", "'__asm__'", 
                     "'__volatile__'", "'auto'", "'break'", "'case'", "'char'", 
                     "'const'", "'continue'", "'default'", "'do'", "'double'", 
                     "'else'", "'enum'", "'extern'", "'float'", "'for'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", 
                     "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", 
                     "'static'", "'struct'", "'superstruct'", "'switch'", 
                     "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", 
                     "'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'", 
                     "'_Bool'", "'_Complex'", "'_Generic'", "'_Imaginary'", 
                     "'_Noreturn'", "'_Static_assert'", "'_Thread_local'", 
                     "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
                     "'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", 
                     "'--'", "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", 
                     "'||'", "'^'", "'!'", "'~'", "'?'", "':'", "';'", "','", 
                     "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
                     "'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", 
                     "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Auto", "Break", "Case", "Char", "Const", "Continue", 
                      "Default", "Do", "Double", "Else", "Enum", "Extern", 
                      "Float", "For", "Goto", "If", "Inline", "Int", "Long", 
                      "Register", "Restrict", "Return", "Short", "Signed", 
                      "Sizeof", "Static", "Struct", "Superstruct", "Switch", 
                      "Typedef", "Union", "Unsigned", "Void", "Volatile", 
                      "While", "Alignas", "Alignof", "Atomic", "Bool", "Complex", 
                      "Generic", "Imaginary", "Noreturn", "StaticAssert", 
                      "ThreadLocal", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Less", 
                      "LessEqual", "Greater", "GreaterEqual", "LeftShift", 
                      "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
                      "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
                      "Caret", "Not", "Tilde", "Question", "Colon", "Semi", 
                      "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", 
                      "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "SingleLineMacro", 
                      "MultiLineMacro", "AsmBlock", "Whitespace", "Newline", 
                      "BlockComment", "LineComment" ]

    RULE_macro = 0
    RULE_stringLiteral = 1
    RULE_compoundStringLiteral = 2
    RULE_primaryExpression = 3
    RULE_genericSelection = 4
    RULE_genericAssocList = 5
    RULE_genericAssociation = 6
    RULE_postfixExpression = 7
    RULE_argumentExpressionList = 8
    RULE_unaryExpression = 9
    RULE_unaryOperator = 10
    RULE_castExpression = 11
    RULE_multiplicativeExpression = 12
    RULE_additiveExpression = 13
    RULE_shiftExpression = 14
    RULE_relationalExpression = 15
    RULE_equalityExpression = 16
    RULE_andExpression = 17
    RULE_exclusiveOrExpression = 18
    RULE_inclusiveOrExpression = 19
    RULE_logicalAndExpression = 20
    RULE_logicalOrExpression = 21
    RULE_conditionalExpression = 22
    RULE_assignmentExpression = 23
    RULE_assignmentOperator = 24
    RULE_expression = 25
    RULE_constantExpression = 26
    RULE_declaration = 27
    RULE_declarationSpecifiers = 28
    RULE_declarationSpecifiers2 = 29
    RULE_declarationSpecifier = 30
    RULE_initDeclaratorList = 31
    RULE_initDeclarator = 32
    RULE_storageClassSpecifier = 33
    RULE_typeSpecifier = 34
    RULE_superStructSpecifier = 35
    RULE_superStructBody = 36
    RULE_superStructMember = 37
    RULE_superStructDeclaration = 38
    RULE_structOrUnionSpecifier = 39
    RULE_structOrUnion = 40
    RULE_structDeclarationList = 41
    RULE_structDeclaration = 42
    RULE_specifierQualifierList = 43
    RULE_structDeclaratorList = 44
    RULE_structDeclarator = 45
    RULE_enumSpecifier = 46
    RULE_enumeratorList = 47
    RULE_enumerator = 48
    RULE_enumerationConstant = 49
    RULE_atomicTypeSpecifier = 50
    RULE_typeQualifier = 51
    RULE_functionSpecifier = 52
    RULE_alignmentSpecifier = 53
    RULE_declarator = 54
    RULE_directDeclarator = 55
    RULE_vcSpecificModifer = 56
    RULE_gccDeclaratorExtension = 57
    RULE_gccAttributeSpecifier = 58
    RULE_gccAttributeList = 59
    RULE_gccAttribute = 60
    RULE_nestedParenthesesBlock = 61
    RULE_pointer = 62
    RULE_typeQualifierList = 63
    RULE_parameterTypeList = 64
    RULE_parameterList = 65
    RULE_parameterDeclaration = 66
    RULE_identifierList = 67
    RULE_typeName = 68
    RULE_abstractDeclarator = 69
    RULE_directAbstractDeclarator = 70
    RULE_typedefName = 71
    RULE_initializer = 72
    RULE_initializerList = 73
    RULE_designation = 74
    RULE_designatorList = 75
    RULE_designator = 76
    RULE_staticAssertDeclaration = 77
    RULE_statement = 78
    RULE_labeledStatement = 79
    RULE_compoundStatement = 80
    RULE_blockItemList = 81
    RULE_blockItem = 82
    RULE_expressionStatement = 83
    RULE_selectionStatement = 84
    RULE_iterationStatement = 85
    RULE_forCondition = 86
    RULE_forDeclaration = 87
    RULE_forExpression = 88
    RULE_jumpStatement = 89
    RULE_compilationUnit = 90
    RULE_translationUnit = 91
    RULE_directive = 92
    RULE_externalDeclaration = 93
    RULE_functionDefinition = 94
    RULE_declarationList = 95

    ruleNames =  [ "macro", "stringLiteral", "compoundStringLiteral", "primaryExpression", 
                   "genericSelection", "genericAssocList", "genericAssociation", 
                   "postfixExpression", "argumentExpressionList", "unaryExpression", 
                   "unaryOperator", "castExpression", "multiplicativeExpression", 
                   "additiveExpression", "shiftExpression", "relationalExpression", 
                   "equalityExpression", "andExpression", "exclusiveOrExpression", 
                   "inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
                   "conditionalExpression", "assignmentExpression", "assignmentOperator", 
                   "expression", "constantExpression", "declaration", "declarationSpecifiers", 
                   "declarationSpecifiers2", "declarationSpecifier", "initDeclaratorList", 
                   "initDeclarator", "storageClassSpecifier", "typeSpecifier", 
                   "superStructSpecifier", "superStructBody", "superStructMember", 
                   "superStructDeclaration", "structOrUnionSpecifier", "structOrUnion", 
                   "structDeclarationList", "structDeclaration", "specifierQualifierList", 
                   "structDeclaratorList", "structDeclarator", "enumSpecifier", 
                   "enumeratorList", "enumerator", "enumerationConstant", 
                   "atomicTypeSpecifier", "typeQualifier", "functionSpecifier", 
                   "alignmentSpecifier", "declarator", "directDeclarator", 
                   "vcSpecificModifer", "gccDeclaratorExtension", "gccAttributeSpecifier", 
                   "gccAttributeList", "gccAttribute", "nestedParenthesesBlock", 
                   "pointer", "typeQualifierList", "parameterTypeList", 
                   "parameterList", "parameterDeclaration", "identifierList", 
                   "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "selectionStatement", "iterationStatement", "forCondition", 
                   "forDeclaration", "forExpression", "jumpStatement", "compilationUnit", 
                   "translationUnit", "directive", "externalDeclaration", 
                   "functionDefinition", "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    Auto=20
    Break=21
    Case=22
    Char=23
    Const=24
    Continue=25
    Default=26
    Do=27
    Double=28
    Else=29
    Enum=30
    Extern=31
    Float=32
    For=33
    Goto=34
    If=35
    Inline=36
    Int=37
    Long=38
    Register=39
    Restrict=40
    Return=41
    Short=42
    Signed=43
    Sizeof=44
    Static=45
    Struct=46
    Superstruct=47
    Switch=48
    Typedef=49
    Union=50
    Unsigned=51
    Void=52
    Volatile=53
    While=54
    Alignas=55
    Alignof=56
    Atomic=57
    Bool=58
    Complex=59
    Generic=60
    Imaginary=61
    Noreturn=62
    StaticAssert=63
    ThreadLocal=64
    LeftParen=65
    RightParen=66
    LeftBracket=67
    RightBracket=68
    LeftBrace=69
    RightBrace=70
    Less=71
    LessEqual=72
    Greater=73
    GreaterEqual=74
    LeftShift=75
    RightShift=76
    Plus=77
    PlusPlus=78
    Minus=79
    MinusMinus=80
    Star=81
    Div=82
    Mod=83
    And=84
    Or=85
    AndAnd=86
    OrOr=87
    Caret=88
    Not=89
    Tilde=90
    Question=91
    Colon=92
    Semi=93
    Comma=94
    Assign=95
    StarAssign=96
    DivAssign=97
    ModAssign=98
    PlusAssign=99
    MinusAssign=100
    LeftShiftAssign=101
    RightShiftAssign=102
    AndAssign=103
    XorAssign=104
    OrAssign=105
    Equal=106
    NotEqual=107
    Arrow=108
    Dot=109
    Ellipsis=110
    Identifier=111
    Constant=112
    DigitSequence=113
    StringLiteral=114
    SingleLineMacro=115
    MultiLineMacro=116
    AsmBlock=117
    Whitespace=118
    Newline=119
    BlockComment=120
    LineComment=121

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MacroContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(SSCParser.ArgumentExpressionListContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_macro

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro" ):
                listener.enterMacro(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro" ):
                listener.exitMacro(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacro" ):
                return visitor.visitMacro(self)
            else:
                return visitor.visitChildren(self)




    def macro(self):

        localctx = SSCParser.MacroContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_macro)
        try:
            self.state = 198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 192
                self.match(SSCParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 193
                self.match(SSCParser.Identifier)
                self.state = 194
                self.match(SSCParser.LeftParen)
                self.state = 195
                self.argumentExpressionList()
                self.state = 196
                self.match(SSCParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(SSCParser.StringLiteral, 0)

        def macro(self):
            return self.getTypedRuleContext(SSCParser.MacroContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = SSCParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stringLiteral)
        try:
            self.state = 202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 200
                self.match(SSCParser.StringLiteral)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 201
                self.macro()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(SSCParser.StringLiteralContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_compoundStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStringLiteral" ):
                listener.enterCompoundStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStringLiteral" ):
                listener.exitCompoundStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStringLiteral" ):
                return visitor.visitCompoundStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def compoundStringLiteral(self):

        localctx = SSCParser.CompoundStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_compoundStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 204
                self.stringLiteral()
                self.state = 207 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==111 or _la==114):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def Constant(self):
            return self.getToken(SSCParser.Constant, 0)

        def compoundStringLiteral(self):
            return self.getTypedRuleContext(SSCParser.CompoundStringLiteralContext,0)


        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(SSCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(SSCParser.GenericSelectionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(SSCParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(SSCParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(SSCParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(SSCParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = SSCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 209
                self.match(SSCParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 210
                self.match(SSCParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 211
                self.compoundStringLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 212
                self.match(SSCParser.LeftParen)
                self.state = 213
                self.expression()
                self.state = 214
                self.match(SSCParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 216
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 217
                    self.match(SSCParser.T__0)


                self.state = 220
                self.match(SSCParser.LeftParen)
                self.state = 221
                self.compoundStatement()
                self.state = 222
                self.match(SSCParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 224
                self.match(SSCParser.T__1)
                self.state = 225
                self.match(SSCParser.LeftParen)
                self.state = 226
                self.unaryExpression()
                self.state = 227
                self.match(SSCParser.Comma)
                self.state = 228
                self.typeName()
                self.state = 229
                self.match(SSCParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 231
                self.match(SSCParser.T__2)
                self.state = 232
                self.match(SSCParser.LeftParen)
                self.state = 233
                self.typeName()
                self.state = 234
                self.match(SSCParser.Comma)
                self.state = 235
                self.unaryExpression()
                self.state = 236
                self.match(SSCParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(SSCParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(SSCParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(SSCParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(SSCParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericSelection" ):
                return visitor.visitGenericSelection(self)
            else:
                return visitor.visitChildren(self)




    def genericSelection(self):

        localctx = SSCParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(SSCParser.Generic)
            self.state = 241
            self.match(SSCParser.LeftParen)
            self.state = 242
            self.assignmentExpression()
            self.state = 243
            self.match(SSCParser.Comma)
            self.state = 244
            self.genericAssocList()
            self.state = 245
            self.match(SSCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(SSCParser.GenericAssociationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericAssocList" ):
                return visitor.visitGenericAssocList(self)
            else:
                return visitor.visitChildren(self)




    def genericAssocList(self):

        localctx = SSCParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.genericAssociation()
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 248
                self.match(SSCParser.Comma)
                self.state = 249
                self.genericAssociation()
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(SSCParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(SSCParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SSCParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(SSCParser.Default, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericAssociation" ):
                return visitor.visitGenericAssociation(self)
            else:
                return visitor.visitChildren(self)




    def genericAssociation(self):

        localctx = SSCParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_genericAssociation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 5, 6, 7, 23, 24, 28, 30, 32, 37, 38, 40, 42, 43, 46, 47, 50, 51, 52, 53, 57, 58, 59, 111]:
                self.state = 255
                self.typeName()
                pass
            elif token in [26]:
                self.state = 256
                self.match(SSCParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 259
            self.match(SSCParser.Colon)
            self.state = 260
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(SSCParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.LeftParen)
            else:
                return self.getToken(SSCParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(SSCParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.RightParen)
            else:
                return self.getToken(SSCParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(SSCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(SSCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(SSCParser.RightBrace, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.LeftBracket)
            else:
                return self.getToken(SSCParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.RightBracket)
            else:
                return self.getToken(SSCParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Identifier)
            else:
                return self.getToken(SSCParser.Identifier, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.PlusPlus)
            else:
                return self.getToken(SSCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.MinusMinus)
            else:
                return self.getToken(SSCParser.MinusMinus, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Dot)
            else:
                return self.getToken(SSCParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Arrow)
            else:
                return self.getToken(SSCParser.Arrow, i)

        def Comma(self):
            return self.getToken(SSCParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(SSCParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = SSCParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 262
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 263
                    self.match(SSCParser.T__0)


                self.state = 266
                self.match(SSCParser.LeftParen)
                self.state = 267
                self.typeName()
                self.state = 268
                self.match(SSCParser.RightParen)
                self.state = 269
                self.match(SSCParser.LeftBrace)
                self.state = 270
                self.initializerList()
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 271
                    self.match(SSCParser.Comma)


                self.state = 274
                self.match(SSCParser.RightBrace)
                pass


            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 26388279107589) != 0):
                self.state = 298
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 278
                    self.match(SSCParser.LeftBracket)
                    self.state = 279
                    self.expression()
                    self.state = 280
                    self.match(SSCParser.RightBracket)
                    pass

                elif la_ == 2:
                    self.state = 282
                    self.match(SSCParser.LeftParen)
                    self.state = 284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                        self.state = 283
                        self.argumentExpressionList()


                    self.state = 286
                    self.match(SSCParser.RightParen)
                    pass

                elif la_ == 3:
                    self.state = 287
                    _la = self._input.LA(1)
                    if not(_la==108 or _la==109):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 288
                    self.match(SSCParser.Identifier)
                    self.state = 289
                    self.match(SSCParser.LeftParen)
                    self.state = 291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                        self.state = 290
                        self.argumentExpressionList()


                    self.state = 293
                    self.match(SSCParser.RightParen)
                    pass

                elif la_ == 4:
                    self.state = 294
                    _la = self._input.LA(1)
                    if not(_la==108 or _la==109):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 295
                    self.match(SSCParser.Identifier)
                    pass

                elif la_ == 5:
                    self.state = 296
                    self.match(SSCParser.PlusPlus)
                    pass

                elif la_ == 6:
                    self.state = 297
                    self.match(SSCParser.MinusMinus)
                    pass


                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpressionList" ):
                return visitor.visitArgumentExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def argumentExpressionList(self):

        localctx = SSCParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.assignmentExpression()
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 304
                self.match(SSCParser.Comma)
                self.state = 305
                self.assignmentExpression()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(SSCParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(SSCParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(SSCParser.CastExpressionContext,0)


        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(SSCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(SSCParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Sizeof)
            else:
                return self.getToken(SSCParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(SSCParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.PlusPlus)
            else:
                return self.getToken(SSCParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.MinusMinus)
            else:
                return self.getToken(SSCParser.MinusMinus, i)

        def getRuleIndex(self):
            return SSCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpression(self):

        localctx = SSCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 311
                    _la = self._input.LA(1)
                    if not(((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & 85899345921) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 316
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

            self.state = 328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 60, 65, 111, 112, 114]:
                self.state = 317
                self.postfixExpression()
                pass
            elif token in [77, 79, 81, 84, 89, 90]:
                self.state = 318
                self.unaryOperator()
                self.state = 319
                self.castExpression()
                pass
            elif token in [44, 56]:
                self.state = 321
                _la = self._input.LA(1)
                if not(_la==44 or _la==56):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 322
                self.match(SSCParser.LeftParen)
                self.state = 323
                self.typeName()
                self.state = 324
                self.match(SSCParser.RightParen)
                pass
            elif token in [86]:
                self.state = 326
                self.match(SSCParser.AndAnd)
                self.state = 327
                self.match(SSCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(SSCParser.And, 0)

        def Star(self):
            return self.getToken(SSCParser.Star, 0)

        def Plus(self):
            return self.getToken(SSCParser.Plus, 0)

        def Minus(self):
            return self.getToken(SSCParser.Minus, 0)

        def Tilde(self):
            return self.getToken(SSCParser.Tilde, 0)

        def Not(self):
            return self.getToken(SSCParser.Not, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = SSCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            _la = self._input.LA(1)
            if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 12437) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(SSCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(SSCParser.CastExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(SSCParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(SSCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)




    def castExpression(self):

        localctx = SSCParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 332
                    self.match(SSCParser.T__0)


                self.state = 335
                self.match(SSCParser.LeftParen)
                self.state = 336
                self.typeName()
                self.state = 337
                self.match(SSCParser.RightParen)
                self.state = 338
                self.castExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 340
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 341
                self.match(SSCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.CastExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Star)
            else:
                return self.getToken(SSCParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Div)
            else:
                return self.getToken(SSCParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Mod)
            else:
                return self.getToken(SSCParser.Mod, i)

        def getRuleIndex(self):
            return SSCParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = SSCParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.castExpression()
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 7) != 0):
                self.state = 345
                _la = self._input.LA(1)
                if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 346
                self.castExpression()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Plus)
            else:
                return self.getToken(SSCParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Minus)
            else:
                return self.getToken(SSCParser.Minus, i)

        def getRuleIndex(self):
            return SSCParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = SSCParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.multiplicativeExpression()
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77 or _la==79:
                self.state = 353
                _la = self._input.LA(1)
                if not(_la==77 or _la==79):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 354
                self.multiplicativeExpression()
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.AdditiveExpressionContext,i)


        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.LeftShift)
            else:
                return self.getToken(SSCParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.RightShift)
            else:
                return self.getToken(SSCParser.RightShift, i)

        def getRuleIndex(self):
            return SSCParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftExpression" ):
                return visitor.visitShiftExpression(self)
            else:
                return visitor.visitChildren(self)




    def shiftExpression(self):

        localctx = SSCParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.additiveExpression()
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==75 or _la==76:
                self.state = 361
                _la = self._input.LA(1)
                if not(_la==75 or _la==76):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 362
                self.additiveExpression()
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Less)
            else:
                return self.getToken(SSCParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Greater)
            else:
                return self.getToken(SSCParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.LessEqual)
            else:
                return self.getToken(SSCParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.GreaterEqual)
            else:
                return self.getToken(SSCParser.GreaterEqual, i)

        def getRuleIndex(self):
            return SSCParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)




    def relationalExpression(self):

        localctx = SSCParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.shiftExpression()
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 15) != 0):
                self.state = 369
                _la = self._input.LA(1)
                if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 370
                self.shiftExpression()
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Equal)
            else:
                return self.getToken(SSCParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.NotEqual)
            else:
                return self.getToken(SSCParser.NotEqual, i)

        def getRuleIndex(self):
            return SSCParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalityExpression(self):

        localctx = SSCParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.relationalExpression()
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==106 or _la==107:
                self.state = 377
                _la = self._input.LA(1)
                if not(_la==106 or _la==107):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 378
                self.relationalExpression()
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.And)
            else:
                return self.getToken(SSCParser.And, i)

        def getRuleIndex(self):
            return SSCParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpression" ):
                return visitor.visitAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def andExpression(self):

        localctx = SSCParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_andExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.equalityExpression()
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==84:
                self.state = 385
                self.match(SSCParser.And)
                self.state = 386
                self.equalityExpression()
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Caret)
            else:
                return self.getToken(SSCParser.Caret, i)

        def getRuleIndex(self):
            return SSCParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveOrExpression" ):
                return visitor.visitExclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def exclusiveOrExpression(self):

        localctx = SSCParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.andExpression()
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 393
                self.match(SSCParser.Caret)
                self.state = 394
                self.andExpression()
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Or)
            else:
                return self.getToken(SSCParser.Or, i)

        def getRuleIndex(self):
            return SSCParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveOrExpression" ):
                return visitor.visitInclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def inclusiveOrExpression(self):

        localctx = SSCParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.exclusiveOrExpression()
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 401
                self.match(SSCParser.Or)
                self.state = 402
                self.exclusiveOrExpression()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.AndAnd)
            else:
                return self.getToken(SSCParser.AndAnd, i)

        def getRuleIndex(self):
            return SSCParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalAndExpression(self):

        localctx = SSCParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.inclusiveOrExpression()
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 409
                self.match(SSCParser.AndAnd)
                self.state = 410
                self.inclusiveOrExpression()
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.OrOr)
            else:
                return self.getToken(SSCParser.OrOr, i)

        def getRuleIndex(self):
            return SSCParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalOrExpression(self):

        localctx = SSCParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.logicalAndExpression()
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==87:
                self.state = 417
                self.match(SSCParser.OrOr)
                self.state = 418
                self.logicalAndExpression()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(SSCParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(SSCParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(SSCParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(SSCParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(SSCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExpression" ):
                return visitor.visitConditionalExpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExpression(self):

        localctx = SSCParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.logicalOrExpression()
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 425
                self.match(SSCParser.Question)
                self.state = 426
                self.expression()
                self.state = 427
                self.match(SSCParser.Colon)
                self.state = 428
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(SSCParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(SSCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(SSCParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(SSCParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(SSCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentExpression" ):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignmentExpression(self):

        localctx = SSCParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignmentExpression)
        try:
            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.unaryExpression()
                self.state = 434
                self.assignmentOperator()
                self.state = 435
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 437
                self.match(SSCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(SSCParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(SSCParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(SSCParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(SSCParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(SSCParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(SSCParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(SSCParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(SSCParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(SSCParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(SSCParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(SSCParser.OrAssign, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = SSCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            _la = self._input.LA(1)
            if not(((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 2047) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = SSCParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.assignmentExpression()
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 443
                self.match(SSCParser.Comma)
                self.state = 444
                self.assignmentExpression()
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(SSCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = SSCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(SSCParser.DeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(SSCParser.Semi, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(SSCParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(SSCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = SSCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 459
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 5, 6, 7, 8, 9, 10, 17, 20, 23, 24, 28, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 62, 64, 111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 452
                self.declarationSpecifiers()
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 64000) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 70368752631809) != 0):
                    self.state = 453
                    self.initDeclaratorList()


                self.state = 456
                self.match(SSCParser.Semi)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(SSCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifiers" ):
                return visitor.visitDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifiers(self):

        localctx = SSCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 461
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 464 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiers2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(SSCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_declarationSpecifiers2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers2" ):
                listener.enterDeclarationSpecifiers2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers2" ):
                listener.exitDeclarationSpecifiers2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifiers2" ):
                return visitor.visitDeclarationSpecifiers2(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifiers2(self):

        localctx = SSCParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declarationSpecifiers2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 466
                self.declarationSpecifier()
                self.state = 469 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 5674234203392313330) != 0) or _la==64 or _la==111):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(SSCParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(SSCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(SSCParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(SSCParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(SSCParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifier" ):
                return visitor.visitDeclarationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifier(self):

        localctx = SSCParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_declarationSpecifier)
        try:
            self.state = 476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 471
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 472
                self.typeSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 473
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 474
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 475
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(SSCParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclaratorList" ):
                return visitor.visitInitDeclaratorList(self)
            else:
                return visitor.visitChildren(self)




    def initDeclaratorList(self):

        localctx = SSCParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.initDeclarator()
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 479
                self.match(SSCParser.Comma)
                self.state = 480
                self.initDeclarator()
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(SSCParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(SSCParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(SSCParser.InitializerContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclarator" ):
                return visitor.visitInitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initDeclarator(self):

        localctx = SSCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.declarator()
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 487
                self.match(SSCParser.Assign)
                self.state = 488
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(SSCParser.Typedef, 0)

        def Extern(self):
            return self.getToken(SSCParser.Extern, 0)

        def Static(self):
            return self.getToken(SSCParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(SSCParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(SSCParser.Auto, 0)

        def Register(self):
            return self.getToken(SSCParser.Register, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageClassSpecifier" ):
                return visitor.visitStorageClassSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def storageClassSpecifier(self):

        localctx = SSCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            _la = self._input.LA(1)
            if not(((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 17592756996097) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(SSCParser.Void, 0)

        def Char(self):
            return self.getToken(SSCParser.Char, 0)

        def Short(self):
            return self.getToken(SSCParser.Short, 0)

        def Int(self):
            return self.getToken(SSCParser.Int, 0)

        def Long(self):
            return self.getToken(SSCParser.Long, 0)

        def Float(self):
            return self.getToken(SSCParser.Float, 0)

        def Double(self):
            return self.getToken(SSCParser.Double, 0)

        def Signed(self):
            return self.getToken(SSCParser.Signed, 0)

        def Unsigned(self):
            return self.getToken(SSCParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(SSCParser.Bool, 0)

        def Complex(self):
            return self.getToken(SSCParser.Complex, 0)

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(SSCParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(SSCParser.StructOrUnionSpecifierContext,0)


        def superStructSpecifier(self):
            return self.getTypedRuleContext(SSCParser.SuperStructSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(SSCParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(SSCParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(SSCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpecifier" ):
                return visitor.visitTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def typeSpecifier(self):

        localctx = SSCParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_typeSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.match(SSCParser.Void)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 494
                self.match(SSCParser.Char)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 495
                self.match(SSCParser.Short)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 4)
                self.state = 496
                self.match(SSCParser.Int)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 497
                self.match(SSCParser.Long)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 6)
                self.state = 498
                self.match(SSCParser.Float)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 7)
                self.state = 499
                self.match(SSCParser.Double)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 8)
                self.state = 500
                self.match(SSCParser.Signed)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 9)
                self.state = 501
                self.match(SSCParser.Unsigned)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 10)
                self.state = 502
                self.match(SSCParser.Bool)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 11)
                self.state = 503
                self.match(SSCParser.Complex)
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 12)
                self.state = 504
                self.match(SSCParser.T__3)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 13)
                self.state = 505
                self.match(SSCParser.T__4)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 14)
                self.state = 506
                self.match(SSCParser.T__5)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 15)
                self.state = 507
                self.match(SSCParser.T__0)
                self.state = 508
                self.match(SSCParser.LeftParen)
                self.state = 509
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 112) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 510
                self.match(SSCParser.RightParen)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 16)
                self.state = 511
                self.atomicTypeSpecifier()
                pass
            elif token in [46, 50]:
                self.enterOuterAlt(localctx, 17)
                self.state = 512
                self.structOrUnionSpecifier()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 18)
                self.state = 513
                self.superStructSpecifier()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 19)
                self.state = 514
                self.enumSpecifier()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 20)
                self.state = 515
                self.typedefName()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 21)
                self.state = 516
                self.match(SSCParser.T__6)
                self.state = 517
                self.match(SSCParser.LeftParen)
                self.state = 518
                self.constantExpression()
                self.state = 519
                self.match(SSCParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperStructSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Superstruct(self):
            return self.getToken(SSCParser.Superstruct, 0)

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def LeftBrace(self):
            return self.getToken(SSCParser.LeftBrace, 0)

        def superStructBody(self):
            return self.getTypedRuleContext(SSCParser.SuperStructBodyContext,0)


        def RightBrace(self):
            return self.getToken(SSCParser.RightBrace, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_superStructSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperStructSpecifier" ):
                listener.enterSuperStructSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperStructSpecifier" ):
                listener.exitSuperStructSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperStructSpecifier" ):
                return visitor.visitSuperStructSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def superStructSpecifier(self):

        localctx = SSCParser.SuperStructSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_superStructSpecifier)
        try:
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 523
                self.match(SSCParser.Superstruct)
                self.state = 524
                self.match(SSCParser.Identifier)
                self.state = 525
                self.match(SSCParser.LeftBrace)
                self.state = 526
                self.superStructBody()
                self.state = 527
                self.match(SSCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 529
                self.match(SSCParser.Superstruct)
                self.state = 530
                self.match(SSCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperStructBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def superStructMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.SuperStructMemberContext)
            else:
                return self.getTypedRuleContext(SSCParser.SuperStructMemberContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_superStructBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperStructBody" ):
                listener.enterSuperStructBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperStructBody" ):
                listener.exitSuperStructBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperStructBody" ):
                return visitor.visitSuperStructBody(self)
            else:
                return visitor.visitChildren(self)




    def superStructBody(self):

        localctx = SSCParser.SuperStructBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_superStructBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 533
                self.superStructMember()
                self.state = 536 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -3549137833462398990) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 140737505263619) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperStructMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(SSCParser.DeclarationContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SSCParser.FunctionDefinitionContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_superStructMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperStructMember" ):
                listener.enterSuperStructMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperStructMember" ):
                listener.exitSuperStructMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperStructMember" ):
                return visitor.visitSuperStructMember(self)
            else:
                return visitor.visitChildren(self)




    def superStructMember(self):

        localctx = SSCParser.SuperStructMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_superStructMember)
        try:
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 538
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 539
                self.functionDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperStructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(SSCParser.SpecifierQualifierListContext,0)


        def structDeclaratorList(self):
            return self.getTypedRuleContext(SSCParser.StructDeclaratorListContext,0)


        def Semi(self):
            return self.getToken(SSCParser.Semi, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_superStructDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperStructDeclaration" ):
                listener.enterSuperStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperStructDeclaration" ):
                listener.exitSuperStructDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperStructDeclaration" ):
                return visitor.visitSuperStructDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def superStructDeclaration(self):

        localctx = SSCParser.SuperStructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_superStructDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.specifierQualifierList()
            self.state = 543
            self.structDeclaratorList()
            self.state = 544
            self.match(SSCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(SSCParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(SSCParser.LeftBrace, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(SSCParser.StructDeclarationListContext,0)


        def RightBrace(self):
            return self.getToken(SSCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnionSpecifier" ):
                return visitor.visitStructOrUnionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnionSpecifier(self):

        localctx = SSCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 546
                self.structOrUnion()
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 547
                    self.match(SSCParser.Identifier)


                self.state = 550
                self.match(SSCParser.LeftBrace)
                self.state = 551
                self.structDeclarationList()
                self.state = 552
                self.match(SSCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 554
                self.structOrUnion()
                self.state = 555
                self.match(SSCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(SSCParser.Struct, 0)

        def Union(self):
            return self.getToken(SSCParser.Union, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnion" ):
                return visitor.visitStructOrUnion(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnion(self):

        localctx = SSCParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            _la = self._input.LA(1)
            if not(_la==46 or _la==50):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(SSCParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclarationList" ):
                return visitor.visitStructDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def structDeclarationList(self):

        localctx = SSCParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 561
                self.structDeclaration()
                self.state = 564 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -8197451403858280206) != 0) or _la==111):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(SSCParser.SpecifierQualifierListContext,0)


        def structDeclaratorList(self):
            return self.getTypedRuleContext(SSCParser.StructDeclaratorListContext,0)


        def Semi(self):
            return self.getToken(SSCParser.Semi, 0)

        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(SSCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclaration" ):
                return visitor.visitStructDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def structDeclaration(self):

        localctx = SSCParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_structDeclaration)
        try:
            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 566
                self.specifierQualifierList()
                self.state = 567
                self.structDeclaratorList()
                self.state = 568
                self.match(SSCParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 570
                self.specifierQualifierList()
                self.state = 571
                self.match(SSCParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 573
                self.staticAssertDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(SSCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(SSCParser.TypeQualifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(SSCParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecifierQualifierList" ):
                return visitor.visitSpecifierQualifierList(self)
            else:
                return visitor.visitChildren(self)




    def specifierQualifierList(self):

        localctx = SSCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 576
                self.typeSpecifier()
                pass

            elif la_ == 2:
                self.state = 577
                self.typeQualifier()
                pass


            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 580
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(SSCParser.StructDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclaratorList" ):
                return visitor.visitStructDeclaratorList(self)
            else:
                return visitor.visitChildren(self)




    def structDeclaratorList(self):

        localctx = SSCParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.structDeclarator()
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 584
                self.match(SSCParser.Comma)
                self.state = 585
                self.structDeclarator()
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(SSCParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(SSCParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(SSCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclarator" ):
                return visitor.visitStructDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def structDeclarator(self):

        localctx = SSCParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 591
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 64000) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 70368752631809) != 0):
                    self.state = 592
                    self.declarator()


                self.state = 595
                self.match(SSCParser.Colon)
                self.state = 596
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(SSCParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(SSCParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(SSCParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(SSCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def Comma(self):
            return self.getToken(SSCParser.Comma, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumSpecifier" ):
                return visitor.visitEnumSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def enumSpecifier(self):

        localctx = SSCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.match(SSCParser.Enum)
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 600
                    self.match(SSCParser.Identifier)


                self.state = 603
                self.match(SSCParser.LeftBrace)
                self.state = 604
                self.enumeratorList()
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 605
                    self.match(SSCParser.Comma)


                self.state = 608
                self.match(SSCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.match(SSCParser.Enum)
                self.state = 611
                self.match(SSCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(SSCParser.EnumeratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorList" ):
                return visitor.visitEnumeratorList(self)
            else:
                return visitor.visitChildren(self)




    def enumeratorList(self):

        localctx = SSCParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.enumerator()
            self.state = 619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 615
                    self.match(SSCParser.Comma)
                    self.state = 616
                    self.enumerator() 
                self.state = 621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(SSCParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(SSCParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(SSCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator" ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = SSCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.enumerationConstant()
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 623
                self.match(SSCParser.Assign)
                self.state = 624
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerationConstant" ):
                return visitor.visitEnumerationConstant(self)
            else:
                return visitor.visitChildren(self)




    def enumerationConstant(self):

        localctx = SSCParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(SSCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(SSCParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(SSCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicTypeSpecifier" ):
                return visitor.visitAtomicTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def atomicTypeSpecifier(self):

        localctx = SSCParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(SSCParser.Atomic)
            self.state = 630
            self.match(SSCParser.LeftParen)
            self.state = 631
            self.typeName()
            self.state = 632
            self.match(SSCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(SSCParser.Const, 0)

        def Restrict(self):
            return self.getToken(SSCParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(SSCParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(SSCParser.Atomic, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQualifier" ):
                return visitor.visitTypeQualifier(self)
            else:
                return visitor.visitChildren(self)




    def typeQualifier(self):

        localctx = SSCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 153123486859001856) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(SSCParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(SSCParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(SSCParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def macro(self):
            return self.getTypedRuleContext(SSCParser.MacroContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionSpecifier" ):
                return visitor.visitFunctionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def functionSpecifier(self):

        localctx = SSCParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_functionSpecifier)
        try:
            self.state = 646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.match(SSCParser.Inline)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 637
                self.match(SSCParser.Noreturn)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 3)
                self.state = 638
                self.match(SSCParser.T__7)
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 4)
                self.state = 639
                self.match(SSCParser.T__8)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 5)
                self.state = 640
                self.gccAttributeSpecifier()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 6)
                self.state = 641
                self.match(SSCParser.T__9)
                self.state = 642
                self.match(SSCParser.LeftParen)
                self.state = 643
                self.match(SSCParser.Identifier)
                self.state = 644
                self.match(SSCParser.RightParen)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 7)
                self.state = 645
                self.macro()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(SSCParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(SSCParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(SSCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentSpecifier" ):
                return visitor.visitAlignmentSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def alignmentSpecifier(self):

        localctx = SSCParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_alignmentSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(SSCParser.Alignas)
            self.state = 649
            self.match(SSCParser.LeftParen)
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 650
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 651
                self.constantExpression()
                pass


            self.state = 654
            self.match(SSCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(SSCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(SSCParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(SSCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = SSCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81 or _la==88:
                self.state = 656
                self.pointer()


            self.state = 659
            self.directDeclarator(0)
            self.state = 663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 660
                    self.gccDeclaratorExtension() 
                self.state = 665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(SSCParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def Colon(self):
            return self.getToken(SSCParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(SSCParser.DigitSequence, 0)

        def vcSpecificModifer(self):
            return self.getTypedRuleContext(SSCParser.VcSpecificModiferContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(SSCParser.DirectDeclaratorContext,0)


        def LeftBracket(self):
            return self.getToken(SSCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(SSCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(SSCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(SSCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(SSCParser.Static, 0)

        def Star(self):
            return self.getToken(SSCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(SSCParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SSCParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectDeclarator" ):
                return visitor.visitDirectDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SSCParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 667
                self.match(SSCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 668
                self.match(SSCParser.LeftParen)
                self.state = 669
                self.declarator()
                self.state = 670
                self.match(SSCParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 672
                self.match(SSCParser.Identifier)
                self.state = 673
                self.match(SSCParser.Colon)
                self.state = 674
                self.match(SSCParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 675
                self.vcSpecificModifer()
                self.state = 676
                self.match(SSCParser.Identifier)
                pass

            elif la_ == 5:
                self.state = 678
                self.match(SSCParser.LeftParen)
                self.state = 679
                self.vcSpecificModifer()
                self.state = 680
                self.declarator()
                self.state = 681
                self.match(SSCParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 730
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 728
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                    if la_ == 1:
                        localctx = SSCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 685
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 686
                        self.match(SSCParser.LeftBracket)
                        self.state = 688
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 153123486859001856) != 0):
                            self.state = 687
                            self.typeQualifierList()


                        self.state = 691
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                            self.state = 690
                            self.assignmentExpression()


                        self.state = 693
                        self.match(SSCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = SSCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 694
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 695
                        self.match(SSCParser.LeftBracket)
                        self.state = 696
                        self.match(SSCParser.Static)
                        self.state = 698
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 153123486859001856) != 0):
                            self.state = 697
                            self.typeQualifierList()


                        self.state = 700
                        self.assignmentExpression()
                        self.state = 701
                        self.match(SSCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = SSCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 703
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 704
                        self.match(SSCParser.LeftBracket)
                        self.state = 705
                        self.typeQualifierList()
                        self.state = 706
                        self.match(SSCParser.Static)
                        self.state = 707
                        self.assignmentExpression()
                        self.state = 708
                        self.match(SSCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = SSCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 710
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 711
                        self.match(SSCParser.LeftBracket)
                        self.state = 713
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 153123486859001856) != 0):
                            self.state = 712
                            self.typeQualifierList()


                        self.state = 715
                        self.match(SSCParser.Star)
                        self.state = 716
                        self.match(SSCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = SSCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 717
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 718
                        self.match(SSCParser.LeftParen)
                        self.state = 719
                        self.parameterTypeList()
                        self.state = 720
                        self.match(SSCParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = SSCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 722
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 723
                        self.match(SSCParser.LeftParen)
                        self.state = 725
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==111:
                            self.state = 724
                            self.identifierList()


                        self.state = 727
                        self.match(SSCParser.RightParen)
                        pass

             
                self.state = 732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VcSpecificModiferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SSCParser.RULE_vcSpecificModifer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVcSpecificModifer" ):
                listener.enterVcSpecificModifer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVcSpecificModifer" ):
                listener.exitVcSpecificModifer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVcSpecificModifer" ):
                return visitor.visitVcSpecificModifer(self)
            else:
                return visitor.visitChildren(self)




    def vcSpecificModifer(self):

        localctx = SSCParser.VcSpecificModiferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_vcSpecificModifer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 64000) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def compoundStringLiteral(self):
            return self.getTypedRuleContext(SSCParser.CompoundStringLiteralContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(SSCParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccDeclaratorExtension" ):
                return visitor.visitGccDeclaratorExtension(self)
            else:
                return visitor.visitChildren(self)




    def gccDeclaratorExtension(self):

        localctx = SSCParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_gccDeclaratorExtension)
        try:
            self.state = 741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.match(SSCParser.T__15)
                self.state = 736
                self.match(SSCParser.LeftParen)
                self.state = 737
                self.compoundStringLiteral()
                self.state = 738
                self.match(SSCParser.RightParen)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 740
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.LeftParen)
            else:
                return self.getToken(SSCParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(SSCParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.RightParen)
            else:
                return self.getToken(SSCParser.RightParen, i)

        def getRuleIndex(self):
            return SSCParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttributeSpecifier" ):
                return visitor.visitGccAttributeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeSpecifier(self):

        localctx = SSCParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(SSCParser.T__16)
            self.state = 744
            self.match(SSCParser.LeftParen)
            self.state = 745
            self.match(SSCParser.LeftParen)
            self.state = 746
            self.gccAttributeList()
            self.state = 747
            self.match(SSCParser.RightParen)
            self.state = 748
            self.match(SSCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(SSCParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttributeList" ):
                return visitor.visitGccAttributeList(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeList(self):

        localctx = SSCParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 288230375077969913) != 0):
                self.state = 750
                self.gccAttribute()


            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 753
                self.match(SSCParser.Comma)
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 288230375077969913) != 0):
                    self.state = 754
                    self.gccAttribute()


                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(SSCParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.LeftParen)
            else:
                return self.getToken(SSCParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.RightParen)
            else:
                return self.getToken(SSCParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(SSCParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttribute" ):
                return visitor.visitGccAttribute(self)
            else:
                return visitor.visitChildren(self)




    def gccAttribute(self):

        localctx = SSCParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 536870915) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 763
                self.match(SSCParser.LeftParen)
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                    self.state = 764
                    self.argumentExpressionList()


                self.state = 767
                self.match(SSCParser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.LeftParen)
            else:
                return self.getToken(SSCParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(SSCParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.RightParen)
            else:
                return self.getToken(SSCParser.RightParen, i)

        def getRuleIndex(self):
            return SSCParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedParenthesesBlock" ):
                return visitor.visitNestedParenthesesBlock(self)
            else:
                return visitor.visitChildren(self)




    def nestedParenthesesBlock(self):

        localctx = SSCParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 288230376151711739) != 0):
                self.state = 775
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121]:
                    self.state = 770
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==65 or _la==66:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [65]:
                    self.state = 771
                    self.match(SSCParser.LeftParen)
                    self.state = 772
                    self.nestedParenthesesBlock()
                    self.state = 773
                    self.match(SSCParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Star)
            else:
                return self.getToken(SSCParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Caret)
            else:
                return self.getToken(SSCParser.Caret, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(SSCParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointer" ):
                return visitor.visitPointer(self)
            else:
                return visitor.visitChildren(self)




    def pointer(self):

        localctx = SSCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 780
                _la = self._input.LA(1)
                if not(_la==81 or _la==88):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 153123486859001856) != 0):
                    self.state = 781
                    self.typeQualifierList()


                self.state = 786 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==81 or _la==88):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(SSCParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQualifierList" ):
                return visitor.visitTypeQualifierList(self)
            else:
                return visitor.visitChildren(self)




    def typeQualifierList(self):

        localctx = SSCParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_typeQualifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 788
                self.typeQualifier()
                self.state = 791 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 153123486859001856) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SSCParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(SSCParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(SSCParser.Ellipsis, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterTypeList" ):
                return visitor.visitParameterTypeList(self)
            else:
                return visitor.visitChildren(self)




    def parameterTypeList(self):

        localctx = SSCParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.parameterList()
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 794
                self.match(SSCParser.Comma)
                self.state = 795
                self.match(SSCParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(SSCParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = SSCParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_parameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.parameterDeclaration()
            self.state = 803
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 799
                    self.match(SSCParser.Comma)
                    self.state = 800
                    self.parameterDeclaration() 
                self.state = 805
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(SSCParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(SSCParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(SSCParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(SSCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclaration" ):
                return visitor.visitParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclaration(self):

        localctx = SSCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self.declarationSpecifiers()
                self.state = 807
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 809
                self.declarationSpecifiers2()
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 8454149) != 0):
                    self.state = 810
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Identifier)
            else:
                return self.getToken(SSCParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SSCParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(SSCParser.Identifier)
            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 816
                self.match(SSCParser.Comma)
                self.state = 817
                self.match(SSCParser.Identifier)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(SSCParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(SSCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = SSCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.specifierQualifierList()
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 8454149) != 0):
                self.state = 824
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(SSCParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(SSCParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(SSCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractDeclarator" ):
                return visitor.visitAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractDeclarator(self):

        localctx = SSCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 827
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81 or _la==88:
                    self.state = 828
                    self.pointer()


                self.state = 831
                self.directAbstractDeclarator(0)
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16 or _la==17:
                    self.state = 832
                    self.gccDeclaratorExtension()
                    self.state = 837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(SSCParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(SSCParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(SSCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(SSCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(SSCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(SSCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(SSCParser.Static, 0)

        def Star(self):
            return self.getToken(SSCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(SSCParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(SSCParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectAbstractDeclarator" ):
                return visitor.visitDirectAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SSCParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 841
                self.match(SSCParser.LeftParen)
                self.state = 842
                self.abstractDeclarator()
                self.state = 843
                self.match(SSCParser.RightParen)
                self.state = 847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 844
                        self.gccDeclaratorExtension() 
                    self.state = 849
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                pass

            elif la_ == 2:
                self.state = 850
                self.match(SSCParser.LeftBracket)
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 153123486859001856) != 0):
                    self.state = 851
                    self.typeQualifierList()


                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                    self.state = 854
                    self.assignmentExpression()


                self.state = 857
                self.match(SSCParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 858
                self.match(SSCParser.LeftBracket)
                self.state = 859
                self.match(SSCParser.Static)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 153123486859001856) != 0):
                    self.state = 860
                    self.typeQualifierList()


                self.state = 863
                self.assignmentExpression()
                self.state = 864
                self.match(SSCParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 866
                self.match(SSCParser.LeftBracket)
                self.state = 867
                self.typeQualifierList()
                self.state = 868
                self.match(SSCParser.Static)
                self.state = 869
                self.assignmentExpression()
                self.state = 870
                self.match(SSCParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 872
                self.match(SSCParser.LeftBracket)
                self.state = 873
                self.match(SSCParser.Star)
                self.state = 874
                self.match(SSCParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 875
                self.match(SSCParser.LeftParen)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5674234203392313330) != 0) or _la==64 or _la==111:
                    self.state = 876
                    self.parameterTypeList()


                self.state = 879
                self.match(SSCParser.RightParen)
                self.state = 883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 880
                        self.gccDeclaratorExtension() 
                    self.state = 885
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 931
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 929
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                    if la_ == 1:
                        localctx = SSCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 888
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 889
                        self.match(SSCParser.LeftBracket)
                        self.state = 891
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 153123486859001856) != 0):
                            self.state = 890
                            self.typeQualifierList()


                        self.state = 894
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                            self.state = 893
                            self.assignmentExpression()


                        self.state = 896
                        self.match(SSCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = SSCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 897
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 898
                        self.match(SSCParser.LeftBracket)
                        self.state = 899
                        self.match(SSCParser.Static)
                        self.state = 901
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 153123486859001856) != 0):
                            self.state = 900
                            self.typeQualifierList()


                        self.state = 903
                        self.assignmentExpression()
                        self.state = 904
                        self.match(SSCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = SSCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 906
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 907
                        self.match(SSCParser.LeftBracket)
                        self.state = 908
                        self.typeQualifierList()
                        self.state = 909
                        self.match(SSCParser.Static)
                        self.state = 910
                        self.assignmentExpression()
                        self.state = 911
                        self.match(SSCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = SSCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 913
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 914
                        self.match(SSCParser.LeftBracket)
                        self.state = 915
                        self.match(SSCParser.Star)
                        self.state = 916
                        self.match(SSCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = SSCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 917
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 918
                        self.match(SSCParser.LeftParen)
                        self.state = 920
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 5674234203392313330) != 0) or _la==64 or _la==111:
                            self.state = 919
                            self.parameterTypeList()


                        self.state = 922
                        self.match(SSCParser.RightParen)
                        self.state = 926
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 923
                                self.gccDeclaratorExtension() 
                            self.state = 928
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                        pass

             
                self.state = 933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefName" ):
                return visitor.visitTypedefName(self)
            else:
                return visitor.visitChildren(self)




    def typedefName(self):

        localctx = SSCParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(SSCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(SSCParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(SSCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(SSCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(SSCParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(SSCParser.Comma, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = SSCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 44, 56, 60, 65, 77, 78, 79, 80, 81, 84, 86, 89, 90, 111, 112, 113, 114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self.assignmentExpression()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 937
                self.match(SSCParser.LeftBrace)
                self.state = 938
                self.initializerList()
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==94:
                    self.state = 939
                    self.match(SSCParser.Comma)


                self.state = 942
                self.match(SSCParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.InitializerContext)
            else:
                return self.getTypedRuleContext(SSCParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.DesignationContext)
            else:
                return self.getTypedRuleContext(SSCParser.DesignationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerList" ):
                return visitor.visitInitializerList(self)
            else:
                return visitor.visitChildren(self)




    def initializerList(self):

        localctx = SSCParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67 or _la==109:
                self.state = 946
                self.designation()


            self.state = 949
            self.initializer()
            self.state = 957
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 950
                    self.match(SSCParser.Comma)
                    self.state = 952
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==67 or _la==109:
                        self.state = 951
                        self.designation()


                    self.state = 954
                    self.initializer() 
                self.state = 959
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(SSCParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(SSCParser.Assign, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignation" ):
                return visitor.visitDesignation(self)
            else:
                return visitor.visitChildren(self)




    def designation(self):

        localctx = SSCParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.designatorList()
            self.state = 961
            self.match(SSCParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(SSCParser.DesignatorContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignatorList" ):
                return visitor.visitDesignatorList(self)
            else:
                return visitor.visitChildren(self)




    def designatorList(self):

        localctx = SSCParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 963
                self.designator()
                self.state = 966 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==67 or _la==109):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(SSCParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(SSCParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(SSCParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(SSCParser.Dot, 0)

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = SSCParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_designator)
        try:
            self.state = 974
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 968
                self.match(SSCParser.LeftBracket)
                self.state = 969
                self.constantExpression()
                self.state = 970
                self.match(SSCParser.RightBracket)
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 2)
                self.state = 972
                self.match(SSCParser.Dot)
                self.state = 973
                self.match(SSCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(SSCParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(SSCParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(SSCParser.Comma, 0)

        def compoundStringLiteral(self):
            return self.getTypedRuleContext(SSCParser.CompoundStringLiteralContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(SSCParser.Semi, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticAssertDeclaration" ):
                return visitor.visitStaticAssertDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def staticAssertDeclaration(self):

        localctx = SSCParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_staticAssertDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(SSCParser.StaticAssert)
            self.state = 977
            self.match(SSCParser.LeftParen)
            self.state = 978
            self.constantExpression()
            self.state = 979
            self.match(SSCParser.Comma)
            self.state = 980
            self.compoundStringLiteral()
            self.state = 981
            self.match(SSCParser.RightParen)
            self.state = 982
            self.match(SSCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(SSCParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(SSCParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SSCParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(SSCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(SSCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(SSCParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(SSCParser.Semi, 0)

        def Volatile(self):
            return self.getToken(SSCParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Colon)
            else:
                return self.getToken(SSCParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SSCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 984
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 986
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 987
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 988
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 989
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 990
                _la = self._input.LA(1)
                if not(_la==16 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 991
                _la = self._input.LA(1)
                if not(_la==19 or _la==53):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 992
                self.match(SSCParser.LeftParen)
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                    self.state = 993
                    self.logicalOrExpression()
                    self.state = 998
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==94:
                        self.state = 994
                        self.match(SSCParser.Comma)
                        self.state = 995
                        self.logicalOrExpression()
                        self.state = 1000
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==92:
                    self.state = 1003
                    self.match(SSCParser.Colon)
                    self.state = 1012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                        self.state = 1004
                        self.logicalOrExpression()
                        self.state = 1009
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==94:
                            self.state = 1005
                            self.match(SSCParser.Comma)
                            self.state = 1006
                            self.logicalOrExpression()
                            self.state = 1011
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1019
                self.match(SSCParser.RightParen)
                self.state = 1020
                self.match(SSCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(SSCParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(SSCParser.StatementContext,0)


        def Case(self):
            return self.getToken(SSCParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(SSCParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(SSCParser.Default, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledStatement" ):
                return visitor.visitLabeledStatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledStatement(self):

        localctx = SSCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_labeledStatement)
        try:
            self.state = 1036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1023
                self.match(SSCParser.Identifier)
                self.state = 1024
                self.match(SSCParser.Colon)
                self.state = 1026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 1025
                    self.statement()


                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1028
                self.match(SSCParser.Case)
                self.state = 1029
                self.constantExpression()
                self.state = 1030
                self.match(SSCParser.Colon)
                self.state = 1031
                self.statement()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1033
                self.match(SSCParser.Default)
                self.state = 1034
                self.match(SSCParser.Colon)
                self.state = 1035
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(SSCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(SSCParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(SSCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = SSCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(SSCParser.LeftBrace)
            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2305843009751152642) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2111062968360995) != 0):
                self.state = 1039
                self.blockItemList()


            self.state = 1042
            self.match(SSCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(SSCParser.BlockItemContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockItemList" ):
                return visitor.visitBlockItemList(self)
            else:
                return visitor.visitChildren(self)




    def blockItemList(self):

        localctx = SSCParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_blockItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1044
                self.blockItem()
                self.state = 1047 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -2305843009751152642) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2111062968360995) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SSCParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(SSCParser.DeclarationContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockItem" ):
                return visitor.visitBlockItem(self)
            else:
                return visitor.visitChildren(self)




    def blockItem(self):

        localctx = SSCParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_blockItem)
        try:
            self.state = 1051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1049
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1050
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(SSCParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(SSCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = SSCParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                self.state = 1053
                self.expression()


            self.state = 1056
            self.match(SSCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(SSCParser.If, 0)

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(SSCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.StatementContext)
            else:
                return self.getTypedRuleContext(SSCParser.StatementContext,i)


        def Else(self):
            return self.getToken(SSCParser.Else, 0)

        def Switch(self):
            return self.getToken(SSCParser.Switch, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionStatement" ):
                return visitor.visitSelectionStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectionStatement(self):

        localctx = SSCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_selectionStatement)
        try:
            self.state = 1073
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1058
                self.match(SSCParser.If)
                self.state = 1059
                self.match(SSCParser.LeftParen)
                self.state = 1060
                self.expression()
                self.state = 1061
                self.match(SSCParser.RightParen)
                self.state = 1062
                self.statement()
                self.state = 1065
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1063
                    self.match(SSCParser.Else)
                    self.state = 1064
                    self.statement()


                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1067
                self.match(SSCParser.Switch)
                self.state = 1068
                self.match(SSCParser.LeftParen)
                self.state = 1069
                self.expression()
                self.state = 1070
                self.match(SSCParser.RightParen)
                self.state = 1071
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(SSCParser.While, 0)

        def LeftParen(self):
            return self.getToken(SSCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(SSCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(SSCParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(SSCParser.StatementContext,0)


        def Do(self):
            return self.getToken(SSCParser.Do, 0)

        def Semi(self):
            return self.getToken(SSCParser.Semi, 0)

        def For(self):
            return self.getToken(SSCParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(SSCParser.ForConditionContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationStatement" ):
                return visitor.visitIterationStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterationStatement(self):

        localctx = SSCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_iterationStatement)
        try:
            self.state = 1095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1075
                self.match(SSCParser.While)
                self.state = 1076
                self.match(SSCParser.LeftParen)
                self.state = 1077
                self.expression()
                self.state = 1078
                self.match(SSCParser.RightParen)
                self.state = 1079
                self.statement()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1081
                self.match(SSCParser.Do)
                self.state = 1082
                self.statement()
                self.state = 1083
                self.match(SSCParser.While)
                self.state = 1084
                self.match(SSCParser.LeftParen)
                self.state = 1085
                self.expression()
                self.state = 1086
                self.match(SSCParser.RightParen)
                self.state = 1087
                self.match(SSCParser.Semi)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1089
                self.match(SSCParser.For)
                self.state = 1090
                self.match(SSCParser.LeftParen)
                self.state = 1091
                self.forCondition()
                self.state = 1092
                self.match(SSCParser.RightParen)
                self.state = 1093
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Semi)
            else:
                return self.getToken(SSCParser.Semi, i)

        def forDeclaration(self):
            return self.getTypedRuleContext(SSCParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(SSCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForCondition" ):
                return visitor.visitForCondition(self)
            else:
                return visitor.visitChildren(self)




    def forCondition(self):

        localctx = SSCParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1097
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                    self.state = 1098
                    self.expression()


                pass


            self.state = 1103
            self.match(SSCParser.Semi)
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                self.state = 1104
                self.forExpression()


            self.state = 1107
            self.match(SSCParser.Semi)
            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                self.state = 1108
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(SSCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(SSCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForDeclaration" ):
                return visitor.visitForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def forDeclaration(self):

        localctx = SSCParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.declarationSpecifiers()
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 64000) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 70368752631809) != 0):
                self.state = 1112
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(SSCParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(SSCParser.Comma)
            else:
                return self.getToken(SSCParser.Comma, i)

        def getRuleIndex(self):
            return SSCParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForExpression" ):
                return visitor.visitForExpression(self)
            else:
                return visitor.visitChildren(self)




    def forExpression(self):

        localctx = SSCParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.assignmentExpression()
            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94:
                self.state = 1116
                self.match(SSCParser.Comma)
                self.state = 1117
                self.assignmentExpression()
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(SSCParser.Semi, 0)

        def Goto(self):
            return self.getToken(SSCParser.Goto, 0)

        def Identifier(self):
            return self.getToken(SSCParser.Identifier, 0)

        def Continue(self):
            return self.getToken(SSCParser.Continue, 0)

        def Break(self):
            return self.getToken(SSCParser.Break, 0)

        def Return(self):
            return self.getToken(SSCParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(SSCParser.UnaryExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SSCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpStatement" ):
                return visitor.visitJumpStatement(self)
            else:
                return visitor.visitChildren(self)




    def jumpStatement(self):

        localctx = SSCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1123
                self.match(SSCParser.Goto)
                self.state = 1124
                self.match(SSCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1125
                self.match(SSCParser.Continue)
                pass

            elif la_ == 3:
                self.state = 1126
                self.match(SSCParser.Break)
                pass

            elif la_ == 4:
                self.state = 1127
                self.match(SSCParser.Return)
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1224996690830819342) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1055531215745025) != 0):
                    self.state = 1128
                    self.expression()


                pass

            elif la_ == 5:
                self.state = 1131
                self.match(SSCParser.Goto)
                self.state = 1132
                self.unaryExpression()
                pass


            self.state = 1135
            self.match(SSCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SSCParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(SSCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = SSCParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3549137833462398990) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 140738042134531) != 0):
                self.state = 1137
                self.translationUnit()


            self.state = 1140
            self.match(SSCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.ExternalDeclarationContext)
            else:
                return self.getTypedRuleContext(SSCParser.ExternalDeclarationContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslationUnit" ):
                return visitor.visitTranslationUnit(self)
            else:
                return visitor.visitChildren(self)




    def translationUnit(self):

        localctx = SSCParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1142
                self.externalDeclaration()
                self.state = 1145 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -3549137833462398990) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 140738042134531) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SingleLineMacro(self):
            return self.getToken(SSCParser.SingleLineMacro, 0)

        def MultiLineMacro(self):
            return self.getToken(SSCParser.MultiLineMacro, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirective" ):
                listener.enterDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirective" ):
                listener.exitDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirective" ):
                return visitor.visitDirective(self)
            else:
                return visitor.visitChildren(self)




    def directive(self):

        localctx = SSCParser.DirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(SSCParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(SSCParser.DeclarationContext,0)


        def macro(self):
            return self.getTypedRuleContext(SSCParser.MacroContext,0)


        def Semi(self):
            return self.getToken(SSCParser.Semi, 0)

        def getRuleIndex(self):
            return SSCParser.RULE_externalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalDeclaration" ):
                return visitor.visitExternalDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def externalDeclaration(self):

        localctx = SSCParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_externalDeclaration)
        try:
            self.state = 1153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1149
                self.functionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1150
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1151
                self.macro()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1152
                self.match(SSCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(SSCParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(SSCParser.CompoundStatementContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(SSCParser.DeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(SSCParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return SSCParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = SSCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1155
                self.declarationSpecifiers()


            self.state = 1158
            self.declarator()
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -3549137833462462478) != 0) or _la==64 or _la==111:
                self.state = 1159
                self.declarationList()


            self.state = 1162
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SSCParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(SSCParser.DeclarationContext,i)


        def getRuleIndex(self):
            return SSCParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationList" ):
                return visitor.visitDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def declarationList(self):

        localctx = SSCParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1164
                self.declaration()
                self.state = 1167 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -3549137833462462478) != 0) or _la==64 or _la==111):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[55] = self.directDeclarator_sempred
        self._predicates[70] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         




