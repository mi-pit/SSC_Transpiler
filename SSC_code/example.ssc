#include <assert.h> /**/
#include <err.h>    /* warn */
#include <math.h>   /* log */
#include <stdint.h> /* size_t, uint64_t */
#include <stdio.h>  /* printf */
#include <stdlib.h> /* alloc */


#define new( TYPE ) calloc( 1, sizeof( TYPE ) )


#define NUMBERS_LIST_DEFAULT_CAP 128


superstruct NumbersList
{
    uint64_t *numbers;
    size_t len, cap;

    int init()
    {
        this->numbers = calloc( NUMBERS_LIST_DEFAULT_CAP, sizeof( uint64_t ) );
        if ( this->numbers == NULL )
            return -1;

        this->len = 0;
        this->cap = NUMBERS_LIST_DEFAULT_CAP;
        return 0;
    }

    void destroy()
    {
        free( this->numbers );
    }

    int append( uint64_t num )
    {
        if ( this->len + 1 > this->cap )
        {
            warnx( "list buffer out of memory; resize not implemented yet" );
            return 1;
        }
        this->numbers[ this->len++ ] = num;
        return 0;
    }

    int pop( uint64_t * container )
    {
        if ( this->len == 0 )
            return 1;

        if ( container != NULL )
            *container = this->numbers[ this->len - 1 ];

        this->numbers[ --this->len ] = 0;
        return 0;
    }

    uint8_t get_max_number_len()
    {
        uint8_t max = 0;
        for ( size_t i = 0; i < this->len; ++i )
        {
            uint8_t ndigs = log10( ( double ) this->numbers[ i ] ) + 1;
            if ( ndigs > max )
                max = ndigs;
        }
        return max;
    }

    void print()
    {
        printf( "[ " );
        uint8_t ndigs                      = this->get_max_number_len();
        char fmt_buffer[ sizeof "%20llu" ] = { 0 };
        snprintf( fmt_buffer, sizeof fmt_buffer, "%%%ullu", ndigs );

        const size_t linebreak_idx = 21 - ndigs; // arbitrary

        for ( size_t i = 0; i < this->len; ++i )
        {
            if ( i != 0 )
            {
                printf( "," );
                if ( i % linebreak_idx != 0 )
                    printf( " " );
                else
                    printf( "\n  " ); // two spaces for "[ "
            }

            printf( fmt_buffer, this->numbers[ i ] );
        }
        printf( " ]\n" );
    }
};


static int add_ints( int a, int b )
{
    return a + b;
}


int main( int argc, const char *const argv[ const ] )
{
    superstruct NumbersList ls = { 0 };
    assert( ls.init() == 0 );

    for ( uint64_t i = 0; i < ls.cap; ++i )
    {
        uint64_t num = ls.cap - i;
        if ( ls.append( num ) != 0 )
            warnx( "ls.append(%llu)", num );
    }
    ls.print();

    {
        superstruct NumbersList *ls_p = calloc( 1, sizeof( superstruct NumbersList ) );
        assert( ls_p->init() == 0 );
        ls_p->print();
        ls_p->destroy();
        free( ls_p );
    }

    for ( size_t i = 0; i < ls.cap / 2; ++i )
    {
        uint64_t cont;
        if ( ls.pop( &cont ) != 0 )
            warnx( "ls.pop(NULL)" );
        assert( cont == i + 1 );
    }
    ls.print();

    assert( add_ints( 1, 2 ) == 3 );
    assert( add_ints( 0, 3 ) == 3 );

    ls.destroy();

    if ( argc < 20 || argv[ 0 ][ 0 ] == '_' )
        return 1;
    return 0;
}
